---
swagger: "2.0"
info:
  description: "These APIs provide services for manipulating Harbor project."
  version: "1.7.0"
  title: "Harbor API"
host: "localhost"
basePath: "/api"
schemes:
- "http"
- "https"
consumes:
- "application/json"
produces:
- "application/json"
- "text/plain"
security:
- basicAuth: []
paths:
  /health:
    get:
      tags:
      - "Products"
      summary: "Health check API"
      description: "The endpoint returns the health stauts of the system.\n"
      parameters: []
      responses:
        200:
          description: "The system health status."
          schema:
            $ref: "#/definitions/OverallHealthStatus"
  /search:
    get:
      tags:
      - "Products"
      summary: "Search for projects, repositories and helm charts"
      description: "The Search endpoint returns information about the projects ,repositories\
        \  and helm charts offered at public status or related to the current logged\
        \ in user. The response includes the project, repository list and charts in\
        \ a proper display order.\n"
      parameters:
      - name: "q"
        in: "query"
        description: "Search parameter for project and repository name."
        required: true
        type: "string"
        x-exportParamName: "Q"
      responses:
        200:
          description: "An array of search results"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Search"
        500:
          description: "Unexpected internal errors."
  /projects:
    get:
      tags:
      - "Products"
      summary: "List projects"
      description: "This endpoint returns all projects created by Harbor, and can\
        \ be filtered by project name.\n"
      parameters:
      - name: "name"
        in: "query"
        description: "The name of project."
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      - name: "public"
        in: "query"
        description: "The project is public or private."
        required: false
        type: "boolean"
        format: "int32"
        x-exportParamName: "Public"
        x-optionalDataType: "Bool"
      - name: "owner"
        in: "query"
        description: "The name of project owner."
        required: false
        type: "string"
        x-exportParamName: "Owner"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        description: "The page nubmer, default is 1."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "page_size"
        in: "query"
        description: "The size of per page, default is 10, maximum is 100."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int32"
      responses:
        200:
          description: "Return all matched projects."
          headers:
            X-Total-Count:
              type: "integer"
              description: "The total count of projects"
            Link:
              type: "string"
              description: "Link refers to the previous page and next page"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Project"
        401:
          description: "User need to log in first."
        500:
          description: "Internal errors."
    head:
      tags:
      - "Products"
      summary: "Check if the project name user provided already exists."
      description: "This endpoint is used to check if the project name user provided\
        \ already exist.\n"
      parameters:
      - name: "project_name"
        in: "query"
        description: "Project name for checking exists."
        required: true
        type: "string"
        x-exportParamName: "ProjectName"
      responses:
        200:
          description: "Project name exists."
        401:
          description: "User need to log in first."
        404:
          description: "Project name does not exist."
        500:
          description: "Unexpected internal errors."
    post:
      tags:
      - "Products"
      summary: "Create a new project."
      description: "This endpoint is for user to create a new project.\n"
      parameters:
      - in: "body"
        name: "project"
        description: "New created project."
        required: true
        schema:
          $ref: "#/definitions/ProjectReq"
        x-exportParamName: "Project"
      responses:
        201:
          description: "Project created successfully."
        400:
          description: "Unsatisfied with constraints of the project creation."
        401:
          description: "User need to log in first."
        409:
          description: "Project name already exists."
        415:
          description: "The Media Type of the request is not supported, it has to\
            \ be \"application/json\""
        500:
          description: "Unexpected internal errors."
  /projects/{project_id}:
    get:
      tags:
      - "Products"
      summary: "Return specific project detail information"
      description: "This endpoint returns specific project information by project\
        \ ID.\n"
      parameters:
      - name: "project_id"
        in: "path"
        description: "Project ID for filtering results."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ProjectId"
      responses:
        200:
          description: "Return matched project information."
          schema:
            $ref: "#/definitions/Project"
        401:
          description: "User need to log in first."
        500:
          description: "Internal errors."
    put:
      tags:
      - "Products"
      summary: "Update properties for a selected project."
      description: "This endpoint is aimed to update the properties of a project.\n"
      parameters:
      - name: "project_id"
        in: "path"
        description: "Selected project ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ProjectId"
      - in: "body"
        name: "project"
        description: "Updates of project."
        required: true
        schema:
          $ref: "#/definitions/ProjectReq"
        x-exportParamName: "Project"
      responses:
        200:
          description: "Updated project properties successfully."
        400:
          description: "Illegal format of provided ID value."
        401:
          description: "User need to log in first."
        403:
          description: "User does not have permission to the project."
        404:
          description: "Project ID does not exist."
        500:
          description: "Unexpected internal errors."
    delete:
      tags:
      - "Products"
      summary: "Delete project by projectID"
      description: "This endpoint is aimed to delete project by project ID.\n"
      parameters:
      - name: "project_id"
        in: "path"
        description: "Project ID of project which will be deleted."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ProjectId"
      responses:
        200:
          description: "Project is deleted successfully."
        400:
          description: "Invalid project id."
        403:
          description: "User need to log in first."
        404:
          description: "Project does not exist."
        412:
          description: "Project contains policies, can not be deleted."
        500:
          description: "Internal errors."
  /projects/{project_id}/logs:
    get:
      tags:
      - "Products"
      summary: "Get access logs accompany with a relevant project."
      description: "This endpoint let user search access logs filtered by operations\
        \ and date time ranges.\n"
      parameters:
      - name: "project_id"
        in: "path"
        description: "Relevant project ID"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ProjectId"
      - name: "username"
        in: "query"
        description: "Username of the operator."
        required: false
        type: "string"
        x-exportParamName: "Username"
        x-optionalDataType: "String"
      - name: "repository"
        in: "query"
        description: "The name of repository"
        required: false
        type: "string"
        x-exportParamName: "Repository"
        x-optionalDataType: "String"
      - name: "tag"
        in: "query"
        description: "The name of tag"
        required: false
        type: "string"
        x-exportParamName: "Tag"
        x-optionalDataType: "String"
      - name: "operation"
        in: "query"
        description: "The operation"
        required: false
        type: "string"
        x-exportParamName: "Operation"
        x-optionalDataType: "String"
      - name: "begin_timestamp"
        in: "query"
        description: "The begin timestamp"
        required: false
        type: "string"
        x-exportParamName: "BeginTimestamp"
        x-optionalDataType: "String"
      - name: "end_timestamp"
        in: "query"
        description: "The end timestamp"
        required: false
        type: "string"
        x-exportParamName: "EndTimestamp"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        description: "The page nubmer, default is 1."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "page_size"
        in: "query"
        description: "The size of per page, default is 10, maximum is 100."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int32"
      responses:
        200:
          description: "Get access log successfully."
          headers:
            X-Total-Count:
              type: "integer"
              description: "The total count of access logs"
            Link:
              type: "string"
              description: "Link refers to the previous page and next page"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/AccessLog"
        400:
          description: "Illegal format of provided ID value."
        401:
          description: "User need to log in first."
        500:
          description: "Unexpected internal errors."
  /projects/{project_id}/metadatas:
    get:
      tags:
      - "Products"
      summary: "Get project metadata."
      description: "This endpoint returns metadata of the project specified by project\
        \ ID.\n"
      parameters:
      - name: "project_id"
        in: "path"
        description: "The ID of project."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ProjectId"
      responses:
        200:
          description: "Get metadata successfully."
          schema:
            $ref: "#/definitions/ProjectMetadata"
        401:
          description: "User need to login first."
        500:
          description: "Internal server errors."
    post:
      tags:
      - "Products"
      summary: "Add metadata for the project."
      description: "This endpoint is aimed to add metadata of a project.\n"
      parameters:
      - name: "project_id"
        in: "path"
        description: "Selected project ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ProjectId"
      - in: "body"
        name: "metadata"
        description: "The metadata of project."
        required: true
        schema:
          $ref: "#/definitions/ProjectMetadata"
        x-exportParamName: "Metadata"
      responses:
        200:
          description: "Add metadata successfully."
        400:
          description: "Invalid request."
        401:
          description: "User need to log in first."
        403:
          description: "User does not have permission to the project."
        404:
          description: "Project ID does not exist."
        415:
          description: "The Media Type of the request is not supported, it has to\
            \ be \"application/json\""
        500:
          description: "Internal server errors."
  /projects/{project_id}/metadatas/{meta_name}:
    get:
      tags:
      - "Products"
      summary: "Get project metadata"
      description: "This endpoint returns specified metadata of a project.\n"
      parameters:
      - name: "project_id"
        in: "path"
        description: "Project ID for filtering results."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ProjectId"
      - name: "meta_name"
        in: "path"
        description: "The name of metadat."
        required: true
        type: "string"
        x-exportParamName: "MetaName"
      responses:
        200:
          description: "Get metadata successfully."
          schema:
            $ref: "#/definitions/ProjectMetadata"
        401:
          description: "User need to log in first."
        500:
          description: "Internal server errors."
    put:
      tags:
      - "Products"
      summary: "Update metadata of a project."
      description: "This endpoint is aimed to update the metadata of a project.\n"
      parameters:
      - name: "project_id"
        in: "path"
        description: "The ID of project."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ProjectId"
      - name: "meta_name"
        in: "path"
        description: "The name of metadat."
        required: true
        type: "string"
        x-exportParamName: "MetaName"
      responses:
        200:
          description: "Updated metadata successfully."
        400:
          description: "Invalid request."
        401:
          description: "User need to log in first."
        403:
          description: "User does not have permission to the project."
        404:
          description: "Project or metadata does not exist."
        500:
          description: "Internal server errors."
    delete:
      tags:
      - "Products"
      summary: "Delete metadata of a project"
      description: "This endpoint is aimed to delete metadata of a project.\n"
      parameters:
      - name: "project_id"
        in: "path"
        description: "The ID of project."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ProjectId"
      - name: "meta_name"
        in: "path"
        description: "The name of metadat."
        required: true
        type: "string"
        x-exportParamName: "MetaName"
      responses:
        200:
          description: "Metadata is deleted successfully."
        400:
          description: "Invalid requst."
        403:
          description: "User need to log in first."
        404:
          description: "Project or metadata does not exist."
        500:
          description: "Internal server errors."
  /projects/{project_id}/members:
    get:
      tags:
      - "Products"
      summary: "Get all project member information"
      description: "Get all project member information"
      parameters:
      - name: "project_id"
        in: "path"
        description: "Relevant project ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ProjectId"
      - name: "entityname"
        in: "query"
        description: "The entity name to search."
        required: false
        type: "string"
        x-exportParamName: "Entityname"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Get project members successfully."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ProjectMemberEntity"
        400:
          description: "The project id is invalid."
        401:
          description: "User need to log in first."
        403:
          description: "User in session does not have permission to the project."
        404:
          description: "Project ID does not exist."
        500:
          description: "Unexpected internal errors."
    post:
      tags:
      - "Products"
      summary: "Create project member"
      description: "Create project member relationship, the member can be one of the\
        \ user_member and group_member,  The user_member need to specify user_id or\
        \ username. If the user already exist in harbor DB, specify the user_id, \
        \ If does not exist in harbor DB, it will SearchAndOnBoard the user. The group_member\
        \ need to specify id or ldap_group_dn. If the group already exist in harbor\
        \ DB. specify the user group's id,  If does not exist, it will SearchAndOnBoard\
        \ the group. "
      parameters:
      - name: "project_id"
        in: "path"
        description: "Relevant project ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ProjectId"
      - in: "body"
        name: "project_member"
        required: false
        schema:
          $ref: "#/definitions/ProjectMember"
        x-exportParamName: "ProjectMember"
      responses:
        201:
          description: "Project member created successfully."
        400:
          description: "Illegal format of project member or project id is invalid,\
            \ or LDAP DN is invalid."
        401:
          description: "User need to log in first."
        403:
          description: "User in session does not have permission to the project."
        409:
          description: "An LDAP user group with same DN already exist."
        500:
          description: "Unexpected internal errors."
  /projects/{project_id}/members/{mid}:
    get:
      tags:
      - "Products"
      summary: "Get the project member information"
      description: "Get the project member information"
      parameters:
      - name: "project_id"
        in: "path"
        description: "Relevant project ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ProjectId"
      - name: "mid"
        in: "path"
        description: "The member ID"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Mid"
      responses:
        200:
          description: "Project member retrieved successfully."
          schema:
            $ref: "#/definitions/ProjectMemberEntity"
        400:
          description: "Illegal format of project member or invalid project id, member\
            \ id."
        401:
          description: "User need to log in first."
        403:
          description: "User in session does not have permission to the project."
        404:
          description: "Project or projet member does not exist."
        500:
          description: "Unexpected internal errors."
    put:
      tags:
      - "Products"
      summary: "Update project member"
      description: "Update project member relationship"
      parameters:
      - name: "project_id"
        in: "path"
        description: "Relevant project ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ProjectId"
      - name: "mid"
        in: "path"
        description: "Member ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Mid"
      - in: "body"
        name: "role"
        required: false
        schema:
          $ref: "#/definitions/RoleRequest"
        x-exportParamName: "Role"
      responses:
        200:
          description: "Project member updated successfully."
        400:
          description: "Invalid role id, it should be 1,2 or 3, or invalid project\
            \ id, or invalid member id."
        401:
          description: "User need to log in first."
        403:
          description: "User in session does not have permission to the project."
        404:
          description: "project or project member does not exist."
        500:
          description: "Unexpected internal errors."
    delete:
      tags:
      - "Products"
      summary: "Delete project member"
      parameters:
      - name: "project_id"
        in: "path"
        description: "Relevant project ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ProjectId"
      - name: "mid"
        in: "path"
        description: "Member ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Mid"
      responses:
        200:
          description: "Project member deleted successfully."
        400:
          description: "The project id or project member id is invalid."
        401:
          description: "User need to log in first."
        403:
          description: "User in session does not have permission to the project."
        500:
          description: "Unexpected internal errors."
  /statistics:
    get:
      tags:
      - "Products"
      summary: "Get projects number and repositories number relevant to the user"
      description: "This endpoint is aimed to statistic all of the projects number\
        \ and repositories number relevant to the logined user, also the public projects\
        \ number and repositories number. If the user is admin, he can also get total\
        \ projects number and total repositories number.\n"
      parameters: []
      responses:
        200:
          description: "Get the projects number and repositories number relevant to\
            \ the user successfully."
          schema:
            $ref: "#/definitions/StatisticMap"
        401:
          description: "User need to log in first."
        500:
          description: "Unexpected internal errors."
  /users:
    get:
      tags:
      - "Products"
      summary: "Get registered users of Harbor."
      description: "This endpoint is for user to search registered users, support\
        \ for filtering results with username.Notice, by now this operation is only\
        \ for administrator.\n"
      parameters:
      - name: "username"
        in: "query"
        description: "Username for filtering results."
        required: false
        type: "string"
        x-exportParamName: "Username"
        x-optionalDataType: "String"
      - name: "email"
        in: "query"
        description: "Email for filtering results."
        required: false
        type: "string"
        x-exportParamName: "Email"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        description: "The page nubmer, default is 1."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "page_size"
        in: "query"
        description: "The size of per page."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int32"
      responses:
        200:
          description: "Searched for users of Harbor successfully."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
        400:
          description: "Invalid user ID."
        401:
          description: "User need to log in first."
        403:
          description: "User does not have permission of admin role."
        500:
          description: "Unexpected internal errors."
    post:
      tags:
      - "Products"
      summary: "Creates a new user account."
      description: "This endpoint is to create a user if the user does not already\
        \ exist.\n"
      parameters:
      - in: "body"
        name: "user"
        description: "New created user."
        required: true
        schema:
          $ref: "#/definitions/User"
        x-exportParamName: "User"
      responses:
        201:
          description: "User created successfully."
        400:
          description: "Unsatisfied with constraints of the user creation."
        403:
          description: "User registration can only be used by admin role user when\
            \ self-registration is off."
        415:
          description: "The Media Type of the request is not supported, it has to\
            \ be \"application/json\""
        500:
          description: "Unexpected internal errors."
  /users/current:
    get:
      tags:
      - "Products"
      summary: "Get current user info."
      description: "This endpoint is to get the current user information.\n"
      parameters: []
      responses:
        200:
          description: "Get current user information successfully."
          schema:
            $ref: "#/definitions/User"
        401:
          description: "User need to log in first."
  /users/current/permissions:
    get:
      tags:
      - "Products"
      summary: "Get current user permissions."
      description: "This endpoint is to get the current user permissions.\n"
      parameters:
      - name: "scope"
        in: "query"
        description: "Get permissions of the scope"
        required: false
        type: "string"
        x-exportParamName: "Scope"
        x-optionalDataType: "String"
      - name: "relative"
        in: "query"
        description: "If true, the resources in the response are relative to the scope,\n\
          eg for resource '/project/1/repository' if relative is 'true' then the resource\
          \ in response will be 'repository'.\n"
        required: false
        type: "boolean"
        x-exportParamName: "Relative"
        x-optionalDataType: "Bool"
      responses:
        200:
          description: "Get current user permission successfully."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Permission"
        401:
          description: "User need to log in first."
        500:
          description: "Internal errors."
  /users/search:
    get:
      tags:
      - "Products"
      summary: "Search users by username, email"
      description: "This endpoint is to search the users by username, email.\n"
      parameters:
      - name: "username"
        in: "query"
        description: "Username for filtering results."
        required: false
        type: "string"
        x-exportParamName: "Username"
        x-optionalDataType: "String"
      - name: "email"
        in: "query"
        description: "Email for filtering results."
        required: false
        type: "string"
        x-exportParamName: "Email"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        description: "The page nubmer, default is 1."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "page_size"
        in: "query"
        description: "The size of per page."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int32"
      responses:
        200:
          description: "Search users by username, email successfully."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/UserSearch"
        500:
          description: "Unexpected internal errors."
  /users/{user_id}:
    get:
      tags:
      - "Products"
      summary: "Get a user's profile."
      description: "Get user's profile with user id.\n"
      parameters:
      - name: "user_id"
        in: "path"
        description: "Registered user ID"
        required: true
        type: "integer"
        format: "int"
        x-exportParamName: "UserId"
      responses:
        200:
          description: "Get user's profile successfully."
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid user ID."
        401:
          description: "User need to log in first."
        403:
          description: "User does not have permission of admin role."
        404:
          description: "User ID does not exist."
        500:
          description: "Unexpected internal errors."
    put:
      tags:
      - "Products"
      summary: "Update a registered user to change his profile."
      description: "This endpoint let a registered user change his profile.\n"
      parameters:
      - name: "user_id"
        in: "path"
        description: "Registered user ID"
        required: true
        type: "integer"
        format: "int"
        x-exportParamName: "UserId"
      - in: "body"
        name: "profile"
        description: "Only email, realname and comment can be modified."
        required: true
        schema:
          $ref: "#/definitions/UserProfile"
        x-exportParamName: "Profile"
      responses:
        200:
          description: "Updated user's profile successfully."
        400:
          description: "Invalid user ID."
        401:
          description: "User need to log in first."
        403:
          description: "User does not have permission of admin role."
        404:
          description: "User ID does not exist."
        500:
          description: "Unexpected internal errors."
    delete:
      tags:
      - "Products"
      summary: "Mark a registered user as be removed."
      description: "This endpoint let administrator of Harbor mark a registered user\
        \ as\nbe removed.It actually won't be deleted from DB.\n"
      parameters:
      - name: "user_id"
        in: "path"
        description: "User ID for marking as to be removed."
        required: true
        type: "integer"
        format: "int"
        x-exportParamName: "UserId"
      responses:
        200:
          description: "Marked user as be removed successfully."
        400:
          description: "Invalid user ID."
        401:
          description: "User need to log in first."
        403:
          description: "User does not have permission of admin role."
        404:
          description: "User ID does not exist."
        500:
          description: "Unexpected internal errors."
  /users/{user_id}/password:
    put:
      tags:
      - "Products"
      summary: "Change the password on a user that already exists."
      description: "This endpoint is for user to update password. Users with the admin\
        \ role can change any user's password. Guest users can change only their own\
        \ password.\n"
      parameters:
      - name: "user_id"
        in: "path"
        description: "Registered user ID."
        required: true
        type: "integer"
        format: "int"
        x-exportParamName: "UserId"
      - in: "body"
        name: "password"
        description: "Password to be updated, the attribute 'old_password' is optional\
          \ when the API is called by the system administrator."
        required: true
        schema:
          $ref: "#/definitions/Password"
        x-exportParamName: "Password"
      responses:
        200:
          description: "Updated password successfully."
        400:
          description: "Invalid user ID; Old password is blank; New password is blank."
        401:
          description: "Don't have authority to change password. Please check login\
            \ status."
        403:
          description: "The caller does not have permission to update the password\
            \ of the user with given ID, or the old password in request body is not\
            \ correct."
        500:
          description: "Unexpected internal errors."
  /users/{user_id}/sysadmin:
    put:
      tags:
      - "Products"
      summary: "Update a registered user to change to be an administrator of Harbor."
      description: "This endpoint let a registered user change to be an administrator\n\
        of Harbor.\n"
      parameters:
      - name: "user_id"
        in: "path"
        description: "Registered user ID"
        required: true
        type: "integer"
        format: "int"
        x-exportParamName: "UserId"
      - in: "body"
        name: "has_admin_role"
        description: "Toggle a user to admin or not."
        required: true
        schema:
          $ref: "#/definitions/HasAdminRole"
        x-exportParamName: "HasAdminRole"
      responses:
        200:
          description: "Updated user's admin role successfully."
        400:
          description: "Invalid user ID."
        401:
          description: "User need to log in first."
        403:
          description: "User does not have permission of admin role."
        404:
          description: "User ID does not exist."
        500:
          description: "Unexpected internal errors."
  /users/{user_id}/gen_cli_secret:
    post:
      tags:
      - "Products"
      summary: "Generate new CLI secret for a user."
      description: "This endpoint let user generate a new CLI secret for himself.\
        \  This API only works when auth mode is set to 'OIDC'.\nOnce this API returns\
        \ with successful status, the old secret will be invalid, as there will be\
        \ only one CLI secret\nfor a user.  The new secret will be returned in the\
        \ response.\n"
      parameters:
      - name: "user_id"
        in: "path"
        description: "User ID"
        required: true
        type: "integer"
        format: "int"
        x-exportParamName: "UserId"
      responses:
        200:
          description: "The secret is successfully generated."
          schema:
            type: "object"
            properties:
              secret:
                type: "string"
                description: "The new secret"
        400:
          description: "Invalid user ID.  Or user is not onboarded via OIDC authentication."
        401:
          description: "User need to log in first."
        403:
          description: "Non-admin user can only generate the cli secret of himself."
        404:
          description: "User ID does not exist."
        412:
          description: "The auth mode of the system is not \"oidc_auth\", or the user\
            \ is not onboarded via OIDC AuthN."
        500:
          description: "Unexpected internal errors."
  /repositories:
    get:
      tags:
      - "Products"
      summary: "Get repositories accompany with relevant project and repo name."
      description: "This endpoint lets user search repositories accompanying with\
        \ relevant project ID and repo name. Repositories can be sorted by repo name,\
        \ creation_time, update_time in either ascending or descending order.\n"
      parameters:
      - name: "project_id"
        in: "query"
        description: "Relevant project ID."
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "ProjectId"
      - name: "q"
        in: "query"
        description: "Repo name for filtering results."
        required: false
        type: "string"
        x-exportParamName: "Q"
        x-optionalDataType: "String"
      - name: "sort"
        in: "query"
        description: "Sort method, valid values include: 'name', '-name', 'creation_time',\
          \ '-creation_time', 'update_time', '-update_time'. Here '-' stands for descending\
          \ order.\n"
        required: false
        type: "string"
        x-exportParamName: "Sort"
        x-optionalDataType: "String"
      - name: "label_id"
        in: "query"
        description: "The ID of label used to filter the result."
        required: false
        type: "integer"
        x-exportParamName: "LabelId"
        x-optionalDataType: "Int32"
      - name: "page"
        in: "query"
        description: "The page nubmer, default is 1."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "page_size"
        in: "query"
        description: "The size of per page, default is 10, maximum is 100."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int32"
      responses:
        200:
          description: "Get repositories successfully."
          headers:
            X-Total-Count:
              type: "integer"
              description: "The total count of repositories"
            Link:
              type: "string"
              description: "Link refers to the previous page and next page"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Repository"
        400:
          description: "Invalid project ID."
        403:
          description: "Project is not public or current user is irrelevant to the\
            \ repository."
        404:
          description: "Project ID does not exist."
        500:
          description: "Unexpected internal errors."
  /repositories/{repo_name}:
    put:
      tags:
      - "Products"
      summary: "Update description of the repository."
      description: "This endpoint is used to update description of the repository.\n"
      parameters:
      - name: "repo_name"
        in: "path"
        description: "The name of repository which will be deleted."
        required: true
        type: "string"
        x-exportParamName: "RepoName"
      - in: "body"
        name: "description"
        description: "The description of the repository."
        required: true
        schema:
          $ref: "#/definitions/RepositoryDescription"
        x-exportParamName: "Description"
      responses:
        200:
          description: "Update successfully."
        401:
          description: "Unauthorized."
        403:
          description: "Forbidden."
        404:
          description: "Repository not found."
    delete:
      tags:
      - "Products"
      summary: "Delete a repository."
      description: "This endpoint let user delete a repository with name.\n"
      parameters:
      - name: "repo_name"
        in: "path"
        description: "The name of repository which will be deleted."
        required: true
        type: "string"
        x-exportParamName: "RepoName"
      responses:
        200:
          description: "Delete successfully."
        400:
          description: "Invalid repo_name."
        401:
          description: "Unauthorized."
        403:
          description: "Forbidden."
        404:
          description: "Repository not found."
  /repositories/{repo_name}/labels:
    get:
      tags:
      - "Products"
      summary: "Get labels of a repository."
      description: "Get labels of a repository specified by the repo_name.\n"
      parameters:
      - name: "repo_name"
        in: "path"
        description: "The name of repository."
        required: true
        type: "string"
        x-exportParamName: "RepoName"
      responses:
        200:
          description: "Successfully."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Label"
        401:
          description: "Unauthorized."
        403:
          description: "Forbidden. User should have read permisson for the repository\
            \ to perform the action."
        404:
          description: "Repository not found."
    post:
      tags:
      - "Products"
      summary: "Add a label to the repository."
      description: "Add a label to the repository.\n"
      parameters:
      - name: "repo_name"
        in: "path"
        description: "The name of repository."
        required: true
        type: "string"
        x-exportParamName: "RepoName"
      - in: "body"
        name: "label"
        description: "Only the ID property is required."
        required: true
        schema:
          $ref: "#/definitions/Label"
        x-exportParamName: "Label"
      responses:
        200:
          description: "Successfully."
        401:
          description: "Unauthorized."
        403:
          description: "Forbidden. User should have write permisson for the repository\
            \ to perform the action."
        404:
          description: "Resource not found."
  /repositories/{repo_name}/labels/{label_id}:
    delete:
      tags:
      - "Products"
      summary: "Delete label from the repository."
      description: "Delete the label from the repository specified by the repo_name.\n"
      parameters:
      - name: "repo_name"
        in: "path"
        description: "The name of repository."
        required: true
        type: "string"
        x-exportParamName: "RepoName"
      - name: "label_id"
        in: "path"
        description: "The ID of label."
        required: true
        type: "integer"
        x-exportParamName: "LabelId"
      responses:
        200:
          description: "Successfully."
        401:
          description: "Unauthorized."
        403:
          description: "Forbidden. User should have write permisson for the repository\
            \ to perform the action."
        404:
          description: "Resource not found."
  /repositories/{repo_name}/tags/{tag}:
    get:
      tags:
      - "Products"
      summary: "Get the tag of the repository."
      description: "This endpoint aims to retrieve the tag of the repository. If deployed\
        \ with Notary, the signature property of response represents whether the image\
        \ is singed or not. If the property is null, the image is unsigned.\n"
      parameters:
      - name: "repo_name"
        in: "path"
        description: "Relevant repository name."
        required: true
        type: "string"
        x-exportParamName: "RepoName"
      - name: "tag"
        in: "path"
        description: "Tag of the repository."
        required: true
        type: "string"
        x-exportParamName: "Tag"
      responses:
        200:
          description: "Get tag successfully."
          schema:
            $ref: "#/definitions/DetailedTag"
        500:
          description: "Unexpected internal errors."
    delete:
      tags:
      - "Products"
      summary: "Delete a tag in a repository."
      description: "This endpoint let user delete tags with repo name and tag.\n"
      parameters:
      - name: "repo_name"
        in: "path"
        description: "The name of repository which will be deleted."
        required: true
        type: "string"
        x-exportParamName: "RepoName"
      - name: "tag"
        in: "path"
        description: "Tag of a repository."
        required: true
        type: "string"
        x-exportParamName: "Tag"
      responses:
        200:
          description: "Delete tag successfully."
        400:
          description: "Invalid repo_name."
        401:
          description: "Unauthorized."
        403:
          description: "Forbidden."
        404:
          description: "Repository or tag not found."
  /repositories/{repo_name}/tags:
    get:
      tags:
      - "Products"
      summary: "Get tags of a relevant repository."
      description: "This endpoint aims to retrieve tags from a relevant repository.\
        \ If deployed with Notary, the signature property of response represents whether\
        \ the image is singed or not. If the property is null, the image is unsigned.\n"
      parameters:
      - name: "repo_name"
        in: "path"
        description: "Relevant repository name."
        required: true
        type: "string"
        x-exportParamName: "RepoName"
      - name: "label_ids"
        in: "query"
        description: "A list of comma separated label IDs."
        required: false
        type: "string"
        x-exportParamName: "LabelIds"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Get tags successfully."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/DetailedTag"
        500:
          description: "Unexpected internal errors."
    post:
      tags:
      - "Products"
      summary: "Retag an image"
      description: "This endpoint tags an existing image with another tag in this\
        \ repo, source images can be in different repos or projects.\n"
      parameters:
      - name: "repo_name"
        in: "path"
        description: "Relevant repository name."
        required: true
        type: "string"
        x-exportParamName: "RepoName"
      - in: "body"
        name: "request"
        description: "Request to give source image and target tag."
        required: true
        schema:
          $ref: "#/definitions/RetagReq"
        x-exportParamName: "Request"
      responses:
        200:
          description: "Image retag successfully."
        400:
          description: "Invalid image values provided."
        401:
          description: "User has no permission to the source project or destination\
            \ project."
        404:
          description: "Project or repository not found."
        409:
          description: "Target tag already exists."
        500:
          description: "Unexpected internal errors."
  /repositories/{repo_name}/tags/{tag}/labels:
    get:
      tags:
      - "Products"
      summary: "Get labels of an image."
      description: "Get labels of an image specified by the repo_name and tag.\n"
      parameters:
      - name: "repo_name"
        in: "path"
        description: "The name of repository."
        required: true
        type: "string"
        x-exportParamName: "RepoName"
      - name: "tag"
        in: "path"
        description: "The tag of the image."
        required: true
        type: "string"
        x-exportParamName: "Tag"
      responses:
        200:
          description: "Successfully."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Label"
        401:
          description: "Unauthorized."
        403:
          description: "Forbidden. User should have read permisson for the image to\
            \ perform the action."
        404:
          description: "Resource not found."
    post:
      tags:
      - "Products"
      summary: "Add a label to image."
      description: "Add a label to the image.\n"
      parameters:
      - name: "repo_name"
        in: "path"
        description: "The name of repository."
        required: true
        type: "string"
        x-exportParamName: "RepoName"
      - name: "tag"
        in: "path"
        description: "The tag of the image."
        required: true
        type: "string"
        x-exportParamName: "Tag"
      - in: "body"
        name: "label"
        description: "Only the ID property is required."
        required: true
        schema:
          $ref: "#/definitions/Label"
        x-exportParamName: "Label"
      responses:
        200:
          description: "Successfully."
        401:
          description: "Unauthorized."
        403:
          description: "Forbidden. User should have write permisson for the image\
            \ to perform the action."
        404:
          description: "Resource not found."
  /repositories/{repo_name}/tags/{tag}/labels/{label_id}:
    delete:
      tags:
      - "Products"
      summary: "Delete label from the image."
      description: "Delete the label from the image specified by the repo_name and\
        \ tag.\n"
      parameters:
      - name: "repo_name"
        in: "path"
        description: "The name of repository."
        required: true
        type: "string"
        x-exportParamName: "RepoName"
      - name: "tag"
        in: "path"
        description: "The tag of the image."
        required: true
        type: "string"
        x-exportParamName: "Tag"
      - name: "label_id"
        in: "path"
        description: "The ID of label."
        required: true
        type: "integer"
        x-exportParamName: "LabelId"
      responses:
        200:
          description: "Successfully."
        401:
          description: "Unauthorized."
        403:
          description: "Forbidden. User should have write permisson for the image\
            \ to perform the action."
        404:
          description: "Resource not found."
  /repositories/{repo_name}/tags/{tag}/manifest:
    get:
      tags:
      - "Products"
      summary: "Get manifests of a relevant repository."
      description: "This endpoint aims to retreive manifests from a relevant repository.\n"
      parameters:
      - name: "repo_name"
        in: "path"
        description: "Repository name"
        required: true
        type: "string"
        x-exportParamName: "RepoName"
      - name: "tag"
        in: "path"
        description: "Tag name"
        required: true
        type: "string"
        x-exportParamName: "Tag"
      - name: "version"
        in: "query"
        description: "The version of manifest, valid value are \"v1\" and \"v2\",\
          \ default is \"v2\""
        required: false
        type: "string"
        x-exportParamName: "Version"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Retrieved manifests from a relevant repository successfully."
          schema:
            $ref: "#/definitions/Manifest"
        404:
          description: "Retrieved manifests from a relevant repository not found."
        500:
          description: "Unexpected internal errors."
  /repositories/{repo_name}/tags/{tag}/scan:
    post:
      tags:
      - "Products"
      summary: "Scan the image."
      description: "Trigger jobservice to call Clair API to scan the image identified\
        \ by the repo_name and tag.  Only project admins have permission to scan images\
        \ under the project.\n"
      parameters:
      - name: "repo_name"
        in: "path"
        description: "Repository name"
        required: true
        type: "string"
        x-exportParamName: "RepoName"
      - name: "tag"
        in: "path"
        description: "Tag name"
        required: true
        type: "string"
        x-exportParamName: "Tag"
      responses:
        200:
          description: "Successfully created the job to scan image."
        401:
          description: "User needs to login or call the API with correct credentials."
        403:
          description: "User doesn't have permission to perform the action."
        404:
          description: "The image does not exist in Harbor."
        415:
          description: "The Media Type of the request is not supported, it has to\
            \ be \"application/json\""
        503:
          description: "Harbor is not deployed with Clair."
  /repositories/{repo_name}/tags/{tag}/vulnerability/details:
    get:
      tags:
      - "Products"
      summary: "Get vulnerability details of the image."
      description: "Call Clair API to get the vulnerability based on the previous\
        \ successful scan.\n"
      parameters:
      - name: "repo_name"
        in: "path"
        description: "Repository name"
        required: true
        type: "string"
        x-exportParamName: "RepoName"
      - name: "tag"
        in: "path"
        description: "Tag name"
        required: true
        type: "string"
        x-exportParamName: "Tag"
      responses:
        200:
          description: "Successfully retrieved the vulnerabilities."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/VulnerabilityItem"
        401:
          description: "User needs to login or call the API with correct credentials."
        403:
          description: "User doesn't have permission to perform the action."
        404:
          description: "The image does not exist in Harbor."
        503:
          description: "Harbor is not deployed with Clair."
  /repositories/{repo_name}/signatures:
    get:
      tags:
      - "Products"
      summary: "Get signature information of a repository"
      description: "This endpoint aims to retrieve signature information of a repository,\
        \ the data is\nfrom the nested notary instance of Harbor.\nIf the repository\
        \ does not have any signature information in notary, this API will\nreturn\
        \ an empty list with response code 200, instead of 404\n"
      parameters:
      - name: "repo_name"
        in: "path"
        description: "repository name."
        required: true
        type: "string"
        x-exportParamName: "RepoName"
      responses:
        200:
          description: "Retrieved signatures."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/RepoSignature"
        500:
          description: "Server side error."
  /repositories/top:
    get:
      tags:
      - "Products"
      summary: "Get public repositories which are accessed most."
      description: "This endpoint aims to let users see the most popular public repositories\n"
      parameters:
      - name: "count"
        in: "query"
        description: "The number of the requested public repositories, default is\
          \ 10 if not provided."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Count"
        x-optionalDataType: "Int32"
      responses:
        200:
          description: "Get popular repositories successfully."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Repository"
        400:
          description: "Bad request because of invalid count."
        500:
          description: "Unexpected internal errors."
  /logs:
    get:
      tags:
      - "Products"
      summary: "Get recent logs of the projects which the user is a member of"
      description: "This endpoint let user see the recent operation logs of the projects\
        \ which he is member of\n"
      parameters:
      - name: "username"
        in: "query"
        description: "Username of the operator."
        required: false
        type: "string"
        x-exportParamName: "Username"
        x-optionalDataType: "String"
      - name: "repository"
        in: "query"
        description: "The name of repository"
        required: false
        type: "string"
        x-exportParamName: "Repository"
        x-optionalDataType: "String"
      - name: "tag"
        in: "query"
        description: "The name of tag"
        required: false
        type: "string"
        x-exportParamName: "Tag"
        x-optionalDataType: "String"
      - name: "operation"
        in: "query"
        description: "The operation"
        required: false
        type: "string"
        x-exportParamName: "Operation"
        x-optionalDataType: "String"
      - name: "begin_timestamp"
        in: "query"
        description: "The begin timestamp"
        required: false
        type: "string"
        x-exportParamName: "BeginTimestamp"
        x-optionalDataType: "String"
      - name: "end_timestamp"
        in: "query"
        description: "The end timestamp"
        required: false
        type: "string"
        x-exportParamName: "EndTimestamp"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        description: "The page nubmer, default is 1."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "page_size"
        in: "query"
        description: "The size of per page, default is 10, maximum is 100."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int32"
      responses:
        200:
          description: "Get the required logs successfully."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/AccessLog"
        400:
          description: "Bad request because of invalid parameters."
        401:
          description: "User need to login first."
        500:
          description: "Unexpected internal errors."
  /replication/executions:
    get:
      tags:
      - "Products"
      summary: "List replication executions."
      description: "This endpoint let user list replication executions.\n"
      parameters:
      - name: "policy_id"
        in: "query"
        description: "The policy ID."
        required: false
        type: "integer"
        x-exportParamName: "PolicyId"
        x-optionalDataType: "Int32"
      - name: "status"
        in: "query"
        description: "The execution status."
        required: false
        type: "string"
        x-exportParamName: "Status"
        x-optionalDataType: "String"
      - name: "trigger"
        in: "query"
        description: "The trigger mode."
        required: false
        type: "string"
        x-exportParamName: "Trigger"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        description: "The page."
        required: false
        type: "integer"
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "page_size"
        in: "query"
        description: "The page size."
        required: false
        type: "integer"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int32"
      responses:
        200:
          description: "Success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ReplicationExecution"
        401:
          description: "User need to login first."
        403:
          description: "User has no privilege for the operation."
        500:
          description: "Unexpected internal errors."
    post:
      tags:
      - "Products"
      summary: "Start one execution of the replication."
      description: "This endpoint is for user to start one execution of the replication.\n"
      parameters:
      - in: "body"
        name: "execution"
        description: "The execution that needs to be started, only the property \"\
          policy_id\" is needed."
        required: true
        schema:
          $ref: "#/definitions/ReplicationExecution"
        x-exportParamName: "Execution"
      responses:
        201:
          description: "Success."
        400:
          description: "Bad request."
        401:
          description: "User need to login first."
        403:
          description: "User has no privilege for the operation."
        415:
          description: "The Media Type of the request is not supported, it has to\
            \ be \"application/json\""
        500:
          description: "Unexpected internal errors."
  /replication/executions/{id}:
    get:
      tags:
      - "Products"
      summary: "Get the execution of the replication."
      description: "This endpoint is for user to get one execution of the replication.\n"
      parameters:
      - name: "id"
        in: "path"
        description: "The execution ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      responses:
        200:
          description: "Success."
          schema:
            $ref: "#/definitions/ReplicationExecution"
        400:
          description: "Bad request."
        401:
          description: "User need to login first."
        403:
          description: "User has no privilege for the operation."
        404:
          description: "Resource requested does not exist."
        415:
          description: "The Media Type of the request is not supported, it has to\
            \ be \"application/json\""
        500:
          description: "Unexpected internal errors."
    put:
      tags:
      - "Products"
      summary: "Stop the execution of the replication."
      description: "This endpoint is for user to stop one execution of the replication.\n"
      parameters:
      - name: "id"
        in: "path"
        description: "The execution ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      responses:
        200:
          description: "Success."
        400:
          description: "Bad request."
        401:
          description: "User need to login first."
        403:
          description: "User has no privilege for the operation."
        404:
          description: "Resource requested does not exist."
        415:
          description: "The Media Type of the request is not supported, it has to\
            \ be \"application/json\""
        500:
          description: "Unexpected internal errors."
  /replication/executions/{id}/tasks:
    get:
      tags:
      - "Products"
      summary: "Get the task list of one execution."
      description: "This endpoint is for user to get the task list of one execution.\n"
      parameters:
      - name: "id"
        in: "path"
        description: "The execution ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      responses:
        200:
          description: "Success."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ReplicationTask"
        400:
          description: "Bad request."
        401:
          description: "User need to login first."
        403:
          description: "User has no privilege for the operation."
        404:
          description: "Resource requested does not exist."
        500:
          description: "Unexpected internal errors."
  /replication/executions/{id}/tasks/{task_id}/log:
    get:
      tags:
      - "Products"
      summary: "Get the log of one task."
      description: "This endpoint is for user to get the log of one task.\n"
      parameters:
      - name: "id"
        in: "path"
        description: "The execution ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      - name: "task_id"
        in: "path"
        description: "The task ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "TaskId"
      responses:
        200:
          description: "Success."
        400:
          description: "Bad request."
        401:
          description: "User need to login first."
        403:
          description: "User has no privilege for the operation."
        404:
          description: "Resource requested does not exist."
        500:
          description: "Unexpected internal errors."
  /replication/policies:
    get:
      tags:
      - "Products"
      summary: "List replication policies"
      description: "This endpoint let user list replication policies\n"
      parameters:
      - name: "name"
        in: "query"
        description: "The replication policy name."
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        description: "The page nubmer."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "page_size"
        in: "query"
        description: "The size of per page."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int32"
      responses:
        200:
          description: "Get policy successfully."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ReplicationPolicy"
        400:
          description: "Bad Request"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        500:
          description: "Internal Server Error"
    post:
      tags:
      - "Products"
      summary: "Create a replication policy"
      description: "This endpoint let user create a replication policy\n"
      parameters:
      - in: "body"
        name: "policy"
        description: "The policy model."
        required: true
        schema:
          $ref: "#/definitions/ReplicationPolicy"
        x-exportParamName: "Policy"
      responses:
        201:
          description: "Created"
        400:
          description: "Bad Request"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        409:
          description: "Conflict"
        415:
          description: "The Media Type of the request is not supported, it has to\
            \ be \"application/json\""
        500:
          description: "Internal Server Error"
  /replication/policies/{id}:
    get:
      tags:
      - "Products"
      summary: "Get replication policy."
      description: "This endpoint let user get replication policy by specific ID.\n"
      parameters:
      - name: "id"
        in: "path"
        description: "policy ID"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      responses:
        200:
          description: "Get the replication policy successfully."
          schema:
            $ref: "#/definitions/ReplicationPolicy"
        400:
          description: "Bad Request"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
        500:
          description: "Internal Server Error"
    put:
      tags:
      - "Products"
      summary: "Update the replication policy"
      description: "This endpoint let user update policy.\n"
      parameters:
      - name: "id"
        in: "path"
        description: "policy ID"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      - in: "body"
        name: "policy"
        description: "The replication policy model."
        required: true
        schema:
          $ref: "#/definitions/ReplicationPolicy"
        x-exportParamName: "Policy"
      responses:
        200:
          description: "Success"
        400:
          description: "Bad Request"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
        409:
          description: "Conflict"
        500:
          description: "Internal Server Error"
    delete:
      tags:
      - "Products"
      summary: "Delete the replication policy specified by ID."
      description: "Delete the replication policy specified by ID.\n"
      parameters:
      - name: "id"
        in: "path"
        description: "Replication policy ID"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      responses:
        200:
          description: "Success"
        400:
          description: "Bad Request"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
        412:
          description: "Precondition Failed"
        500:
          description: "Internal Server Error"
  /labels:
    get:
      tags:
      - "Products"
      summary: "List labels according to the query strings."
      description: "This endpoint let user list labels by name, scope and project_id\n"
      parameters:
      - name: "name"
        in: "query"
        description: "The label name."
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      - name: "scope"
        in: "query"
        description: "The label scope. Valid values are g and p. g for global labels\
          \ and p for project labels."
        required: true
        type: "string"
        x-exportParamName: "Scope"
      - name: "project_id"
        in: "query"
        description: "Relevant project ID, required when scope is p."
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "ProjectId"
        x-optionalDataType: "Int64"
      - name: "page"
        in: "query"
        description: "The page nubmer."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "page_size"
        in: "query"
        description: "The size of per page."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int32"
      responses:
        200:
          description: "Get successfully."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Label"
        400:
          description: "Invalid parameters."
        401:
          description: "User need to log in first."
        500:
          description: "Unexpected internal errors."
    post:
      tags:
      - "Products"
      summary: "Post creates a label"
      description: "This endpoint let user creates a label.\n"
      parameters:
      - in: "body"
        name: "label"
        description: "The json object of label."
        required: true
        schema:
          $ref: "#/definitions/Label"
        x-exportParamName: "Label"
      responses:
        201:
          description: "Create successfully."
        400:
          description: "Invalid parameters."
        401:
          description: "User need to log in first."
        409:
          description: "Label with the same name and same scope already exists."
        415:
          description: "The Media Type of the request is not supported, it has to\
            \ be \"application/json\""
        500:
          description: "Unexpected internal errors."
  /labels/{id}:
    get:
      tags:
      - "Products"
      summary: "Get the label specified by ID."
      description: "This endpoint let user get the label by specific ID.\n"
      parameters:
      - name: "id"
        in: "path"
        description: "Label ID"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      responses:
        200:
          description: "Get successfully."
          schema:
            $ref: "#/definitions/Label"
        401:
          description: "User need to log in first."
        404:
          description: "The resource does not exist."
        500:
          description: "Unexpected internal errors."
    put:
      tags:
      - "Products"
      summary: "Update the label properties."
      description: "This endpoint let user update label properties.\n"
      parameters:
      - name: "id"
        in: "path"
        description: "Label ID"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      - in: "body"
        name: "label"
        description: "The updated label json object."
        required: true
        schema:
          $ref: "#/definitions/Label"
        x-exportParamName: "Label"
      responses:
        200:
          description: "Update successfully."
        400:
          description: "Invalid parameters."
        401:
          description: "User need to log in first."
        404:
          description: "The resource does not exist."
        409:
          description: "The label with the same name already exists."
        500:
          description: "Unexpected internal errors."
    delete:
      tags:
      - "Products"
      summary: "Delete the label specified by ID."
      description: "Delete the label specified by ID.\n"
      parameters:
      - name: "id"
        in: "path"
        description: "Label ID"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      responses:
        200:
          description: "Delete successfully."
        400:
          description: "Invalid parameters."
        401:
          description: "User need to log in first."
        404:
          description: "The resource does not exist."
        500:
          description: "Unexpected internal errors."
  /labels/{id}/resources:
    get:
      tags:
      - "Products"
      summary: "Get the resources that the label is referenced by."
      description: "This endpoint let user get the resources that the label is referenced\
        \ by. Only the replication policies are returned for now.\n"
      parameters:
      - name: "id"
        in: "path"
        description: "Label ID"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      responses:
        200:
          description: "Get successfully."
          schema:
            $ref: "#/definitions/Resource"
        401:
          description: "User need to log in first."
        403:
          description: "Forbidden."
        404:
          description: "The resource does not exist."
        500:
          description: "Unexpected internal errors."
  /replication/adapters:
    get:
      tags:
      - "Products"
      summary: "List supported adapters."
      description: "This endpoint let user list supported adapters.\n"
      parameters: []
      responses:
        200:
          description: "Success."
          schema:
            type: "array"
            items:
              type: "string"
        401:
          description: "Unauthorized."
        403:
          description: "Forbidden."
        500:
          description: "Unexpected internal errors."
  /registries:
    get:
      tags:
      - "Products"
      summary: "List registries."
      description: "This endpoint let user list filtered registries by name, if name\
        \ is nil, list returns all registries.\n"
      parameters:
      - name: "name"
        in: "query"
        description: "Registry's name."
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      responses:
        200:
          description: "List registries successfully."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Registry"
        401:
          description: "User need to log in first."
        500:
          description: "Unexpected internal errors."
    post:
      tags:
      - "Products"
      summary: "Create a new registry."
      description: "This endpoint is for user to create a new registry.\n"
      parameters:
      - in: "body"
        name: "registry"
        description: "New created registry."
        required: true
        schema:
          $ref: "#/definitions/Registry"
        x-exportParamName: "Registry"
      responses:
        201:
          description: "Registry created successfully."
        400:
          description: "Unsatisfied with constraints of the registry creation."
        401:
          description: "User need to log in first."
        409:
          description: "Registry name already exists."
        415:
          description: "The Media Type of the request is not supported, it has to\
            \ be \"application/json\""
        500:
          description: "Unexpected internal errors."
  /registries/ping:
    post:
      tags:
      - "Products"
      summary: "Ping status of a registry."
      description: "This endpoint checks status of a registry, the registry can be\
        \ given by ID or URL (together with credential)\n"
      parameters:
      - in: "body"
        name: "registry"
        description: "Registry to ping."
        required: true
        schema:
          $ref: "#/definitions/Registry"
        x-exportParamName: "Registry"
      responses:
        200:
          description: "Registry is healthy."
        400:
          description: "No proper registry information provided."
        401:
          description: "User need to log in first."
        404:
          description: "Registry not found (when registry is provided by ID)."
        415:
          description: "The Media Type of the request is not supported, it has to\
            \ be \"application/json\""
        500:
          description: "Unexpected internal errors."
  /registries/{id}:
    get:
      tags:
      - "Products"
      summary: "Get registry."
      description: "This endpoint is for get specific registry."
      parameters:
      - name: "id"
        in: "path"
        description: "The registry ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      responses:
        200:
          description: "Get registry successfully."
          schema:
            $ref: "#/definitions/Registry"
        401:
          description: "User need to log in first."
        404:
          description: "Registry not found"
        500:
          description: "Unexpected internal errors."
    put:
      tags:
      - "Products"
      summary: "Update a given registry."
      description: "This endpoint is for update a given registry.\n"
      parameters:
      - name: "id"
        in: "path"
        description: "The registry's ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      - in: "body"
        name: "repo_target"
        description: "Updates registry."
        required: true
        schema:
          $ref: "#/definitions/PutRegistry"
        x-exportParamName: "RepoTarget"
      responses:
        200:
          description: "Updated registry successfully."
        400:
          description: "The registry is associated with policy which is enabled."
        401:
          description: "User need to log in first."
        404:
          description: "Registry does not exist."
        409:
          description: "Registry name is already used."
        500:
          description: "Unexpected internal errors."
    delete:
      tags:
      - "Products"
      summary: "Delete specific registry."
      description: "This endpoint is for to delete specific registry.\n"
      parameters:
      - name: "id"
        in: "path"
        description: "The registry's ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      responses:
        200:
          description: "Registry deleted successfully."
        400:
          description: "Registry's ID is invalid or the registry is used by policies."
        401:
          description: "Only admin has this authority."
        404:
          description: "Registry does not exist."
        500:
          description: "Unexpected internal errors."
  /registries/{id}/info:
    get:
      tags:
      - "Products"
      summary: "Get registry info."
      description: "Get the info of one specific registry."
      parameters:
      - name: "id"
        in: "path"
        description: "The registry ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      responses:
        200:
          description: "Get registry successfully."
          schema:
            $ref: "#/definitions/RegistryInfo"
        401:
          description: "User need to log in first."
        404:
          description: "Registry not found"
        500:
          description: "Unexpected internal errors."
  /registries/{id}/namespace:
    get:
      tags:
      - "Products"
      summary: "List namespaces of registry"
      description: "This endpoint let user list namespaces of registry according to\
        \ query.\n"
      parameters:
      - name: "id"
        in: "path"
        description: "The registry ID."
        required: true
        type: "integer"
        x-exportParamName: "Id"
      - name: "name"
        in: "query"
        description: "The name of namespace."
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Namespace"
        401:
          description: "User need to login first."
        403:
          description: "User has no privilege for the operation."
        404:
          description: "No registry found."
        500:
          description: "Unexpected internal errors."
  /internal/syncregistry:
    post:
      tags:
      - "Products"
      summary: "Sync repositories from registry to DB."
      description: "This endpoint is for syncing all repositories of registry with\
        \ database.\n"
      parameters: []
      responses:
        200:
          description: "Sync repositories successfully."
        401:
          description: "User need to log in first."
        403:
          description: "User does not have permission of admin role."
        415:
          description: "The Media Type of the request is not supported, it has to\
            \ be \"application/json\""
        500:
          description: "Unexpected internal errors."
  /systeminfo:
    get:
      tags:
      - "Products"
      summary: "Get general system info"
      description: "This API is for retrieving general system info, this can be called\
        \ by anonymous request.\n"
      parameters: []
      responses:
        200:
          description: "Get general info successfully."
          schema:
            $ref: "#/definitions/GeneralInfo"
        500:
          description: "Unexpected internal error."
  /systeminfo/volumes:
    get:
      tags:
      - "Products"
      summary: "Get system volume info (total/free size)."
      description: "This endpoint is for retrieving system volume info that only provides\
        \ for admin user.\n"
      parameters: []
      responses:
        200:
          description: "Get system volumes successfully."
          schema:
            $ref: "#/definitions/SystemInfo"
        401:
          description: "User need to log in first."
        403:
          description: "User does not have permission of admin role."
        500:
          description: "Unexpected internal errors."
  /systeminfo/getcert:
    get:
      tags:
      - "Products"
      summary: "Get default root certificate."
      description: "This endpoint is for downloading a default root certificate.\n"
      parameters: []
      responses:
        200:
          description: "Get default root certificate successfully."
        404:
          description: "Not found the default root certificate."
        500:
          description: "Unexpected internal errors."
  /ldap/ping:
    post:
      tags:
      - "Products"
      summary: "Ping available ldap service."
      description: "This endpoint ping the available ldap service for test related\
        \ configuration parameters.\n"
      parameters:
      - in: "body"
        name: "ldapconf"
        description: "ldap configuration. support input ldap service configuration.\
          \ If it's a empty request, will load current configuration from the system."
        required: false
        schema:
          $ref: "#/definitions/LdapConf"
        x-exportParamName: "Ldapconf"
      responses:
        200:
          description: "Ping ldap service successfully."
        400:
          description: "Inviald ldap configuration parameters."
        401:
          description: "User need to login first."
        403:
          description: "Only admin has this authority."
        415:
          description: "The Media Type of the request is not supported, it has to\
            \ be \"application/json\""
        500:
          description: "Unexpected internal errors."
  /ldap/groups/search:
    get:
      tags:
      - "Products"
      summary: "Search available ldap groups."
      description: "This endpoint searches the available ldap groups based on related\
        \ configuration parameters. support to search by groupname or groupdn.\n"
      parameters:
      - name: "groupname"
        in: "query"
        description: "Ldap group name"
        required: false
        type: "string"
        x-exportParamName: "Groupname"
        x-optionalDataType: "String"
      - name: "groupdn"
        in: "query"
        description: "The LDAP group DN"
        required: false
        type: "string"
        x-exportParamName: "Groupdn"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Search ldap group successfully."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/UserGroup"
        400:
          description: "The Ldap group DN is invalid."
        404:
          description: "No ldap group found."
        500:
          description: "Unexpected internal errors."
  /ldap/users/search:
    get:
      tags:
      - "Products"
      summary: "Search available ldap users."
      description: "This endpoint searches the available ldap users based on related\
        \ configuration parameters. Support searched by input ladp configuration,\
        \ load configuration from the system and specific filter.\n"
      parameters:
      - name: "username"
        in: "query"
        description: "Registered user ID"
        required: false
        type: "string"
        x-exportParamName: "Username"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Search ldap users successfully."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/LdapUsers"
        401:
          description: "User need to login first."
        403:
          description: "Only admin has this authority."
        500:
          description: "Unexpected internal errors."
  /ldap/users/import:
    post:
      tags:
      - "Products"
      summary: "Import selected available ldap users."
      description: "This endpoint adds the selected available ldap users to harbor\
        \ based on related configuration parameters from the system. System will try\
        \ to guess the user email address and realname, add to harbor user information.\n\
        If have errors when import user, will return the list of importing failed\
        \ uid and the failed reason.\n"
      parameters:
      - in: "body"
        name: "uid_list"
        description: "The uid listed for importing. This list will check users validity\
          \ of ldap service based on configuration from the system."
        required: true
        schema:
          $ref: "#/definitions/LdapImportUsers"
        x-exportParamName: "UidList"
      responses:
        200:
          description: "Add ldap users successfully."
        401:
          description: "User need to login first."
        403:
          description: "Only admin has this authority."
        404:
          description: "Failed import some users."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/LdapFailedImportUsers"
        415:
          description: "The Media Type of the request is not supported, it has to\
            \ be \"application/json\""
  /usergroups:
    get:
      tags:
      - "Products"
      summary: "Get all user groups information"
      description: "Get all user groups information"
      parameters: []
      responses:
        200:
          description: "Get user group successfully."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/UserGroup"
        401:
          description: "User need to log in first."
        403:
          description: "User in session does not have permission to the user group."
        500:
          description: "Unexpected internal errors."
    post:
      tags:
      - "Products"
      summary: "Create user group"
      description: "Create user group information"
      parameters:
      - in: "body"
        name: "usergroup"
        required: false
        schema:
          $ref: "#/definitions/UserGroup"
        x-exportParamName: "Usergroup"
      responses:
        201:
          description: "User group created successfully."
        400:
          description: "Invalid LDAP group DN."
        401:
          description: "User need to log in first."
        403:
          description: "User in session does not have permission to the user group."
        409:
          description: "An LDAP user group with same DN already exist."
        500:
          description: "Unexpected internal errors."
  /usergroups/{group_id}:
    get:
      tags:
      - "Products"
      summary: "Get user group information"
      description: "Get user group information"
      parameters:
      - name: "group_id"
        in: "path"
        description: "Group ID"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "GroupId"
      responses:
        200:
          description: "User group get successfully."
          schema:
            $ref: "#/definitions/UserGroup"
        400:
          description: "The user group id is invalid."
        401:
          description: "User need to log in first."
        403:
          description: "User in session does not have permission to the user group."
        404:
          description: "User group does not exist."
        500:
          description: "Unexpected internal errors."
    put:
      tags:
      - "Products"
      summary: "Update group information"
      description: "Update user group information"
      parameters:
      - name: "group_id"
        in: "path"
        description: "Group ID"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "GroupId"
      - in: "body"
        name: "usergroup"
        required: false
        schema:
          $ref: "#/definitions/UserGroup"
        x-exportParamName: "Usergroup"
      responses:
        200:
          description: "User group updated successfully."
        400:
          description: "The user group id is invalid."
        401:
          description: "User need to log in first."
        403:
          description: "Only admin has this authority."
        404:
          description: "User group does not exist."
        500:
          description: "Unexpected internal errors."
    delete:
      tags:
      - "Products"
      summary: "Delete user group"
      description: "Delete user group"
      parameters:
      - name: "group_id"
        in: "path"
        required: true
        type: "integer"
        x-exportParamName: "GroupId"
      responses:
        200:
          description: "User group deleted successfully."
        400:
          description: "The user group id is invalid."
        401:
          description: "User need to log in first."
        403:
          description: "Only admin has this authority."
        500:
          description: "Unexpected internal errors."
  /system/gc:
    get:
      tags:
      - "Products"
      summary: "Get gc results."
      description: "This endpoint let user get latest ten gc results."
      parameters: []
      responses:
        200:
          description: "Get gc results successfully."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GCResult"
        401:
          description: "User need to log in first."
        403:
          description: "User does not have permission of admin role."
        500:
          description: "Unexpected internal errors."
  /system/gc/{id}:
    get:
      tags:
      - "Products"
      summary: "Get gc status."
      description: "This endpoint let user get gc status filtered by specific ID."
      parameters:
      - name: "id"
        in: "path"
        description: "Relevant job ID"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      responses:
        200:
          description: "Get gc results successfully."
          schema:
            $ref: "#/definitions/GCResult"
        401:
          description: "User need to log in first."
        403:
          description: "User does not have permission of admin role."
        500:
          description: "Unexpected internal errors."
  /system/gc/{id}/log:
    get:
      tags:
      - "Products"
      summary: "Get gc job log."
      description: "This endpoint let user get gc job logs filtered by specific ID."
      parameters:
      - name: "id"
        in: "path"
        description: "Relevant job ID"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "Id"
      responses:
        200:
          description: "Get successfully."
          schema:
            type: "string"
        400:
          description: "Illegal format of provided ID value."
        401:
          description: "User need to log in first."
        403:
          description: "User does not have permission of admin role."
        404:
          description: "The specific gc ID's log does not exist."
        500:
          description: "Unexpected internal errors."
  /system/gc/schedule:
    get:
      tags:
      - "Products"
      summary: "Get gc's schedule."
      description: "This endpoint is for get schedule of gc job."
      parameters: []
      responses:
        200:
          description: "Get gc's schedule."
          schema:
            $ref: "#/definitions/AdminJobSchedule"
        401:
          description: "User need to log in first."
        403:
          description: "Only admin has this authority."
        500:
          description: "Unexpected internal errors."
    post:
      tags:
      - "Products"
      summary: "Create a gc schedule."
      description: "This endpoint is for update gc schedule.\n"
      parameters:
      - in: "body"
        name: "schedule"
        description: "Updates of gc's schedule."
        required: true
        schema:
          $ref: "#/definitions/AdminJobSchedule"
        x-exportParamName: "Schedule"
      responses:
        200:
          description: "GC schedule successfully."
        400:
          description: "Invalid schedule type."
        401:
          description: "User need to log in first."
        403:
          description: "User does not have permission of admin role."
        409:
          description: "There is a \"gc\" job in progress, so the request cannot be\
            \ served."
        500:
          description: "Unexpected internal errors."
    put:
      tags:
      - "Products"
      summary: "Update gc's schedule."
      description: "This endpoint is for update gc schedule.\n"
      parameters:
      - in: "body"
        name: "schedule"
        description: "Updates of gc's schedule."
        required: true
        schema:
          $ref: "#/definitions/AdminJobSchedule"
        x-exportParamName: "Schedule"
      responses:
        200:
          description: "Updated gc's schedule successfully."
        400:
          description: "Invalid schedule type."
        401:
          description: "User need to log in first."
        403:
          description: "User does not have permission of admin role."
        500:
          description: "Unexpected internal errors."
  /system/scanAll/schedule:
    get:
      tags:
      - "Products"
      summary: "Get scan_all's schedule."
      description: "This endpoint is for getting a schedule for the scan all job,\
        \ which scans all of images in Harbor."
      parameters: []
      responses:
        200:
          description: "Get a schedule for the scan all job, which scans all of images\
            \ in Harbor."
          schema:
            $ref: "#/definitions/AdminJobSchedule"
        401:
          description: "User need to log in first."
        403:
          description: "Only admin has this authority."
        500:
          description: "Unexpected internal errors."
    post:
      tags:
      - "Products"
      summary: "Create a schedule or a manual trigger for the scan all job."
      description: "This endpoint is for creating a schedule or a manual trigger for\
        \ the scan all job, which scans all of images in Harbor.\n"
      parameters:
      - in: "body"
        name: "schedule"
        description: "Create a schedule or a manual trigger for the scan all job."
        required: true
        schema:
          $ref: "#/definitions/AdminJobSchedule"
        x-exportParamName: "Schedule"
      responses:
        200:
          description: "Updated scan_all's schedule successfully."
        400:
          description: "Invalid schedule type."
        401:
          description: "User need to log in first."
        403:
          description: "User does not have permission of admin role."
        409:
          description: "There is a \"scanall\" job in progress, so the request cannot\
            \ be served."
        500:
          description: "Unexpected internal errors."
        503:
          description: "Harbor is not deployed with Clair."
    put:
      tags:
      - "Products"
      summary: "Update scan all's schedule."
      description: "This endpoint is for updating the schedule of scan all job, which\
        \ scans all of images in Harbor.\n"
      parameters:
      - in: "body"
        name: "schedule"
        description: "Updates the schedule of scan all job, which scans all of images\
          \ in Harbor."
        required: true
        schema:
          $ref: "#/definitions/AdminJobSchedule"
        x-exportParamName: "Schedule"
      responses:
        200:
          description: "Updated scan_all's schedule successfully."
        400:
          description: "Invalid schedule type."
        401:
          description: "User need to log in first."
        403:
          description: "User does not have permission of admin role."
        500:
          description: "Unexpected internal errors."
  /configurations:
    get:
      tags:
      - "Products"
      summary: "Get system configurations."
      description: "This endpoint is for retrieving system configurations that only\
        \ provides for admin user.\n"
      parameters: []
      responses:
        200:
          description: "Get system configurations successfully. The response body\
            \ is a map."
          schema:
            $ref: "#/definitions/ConfigurationsResponse"
        401:
          description: "User need to log in first.ß"
        403:
          description: "User does not have permission of admin role."
        500:
          description: "Unexpected internal errors."
    put:
      tags:
      - "Products"
      summary: "Modify system configurations."
      description: "This endpoint is for modifying system configurations that only\
        \ provides for admin user.\n"
      parameters:
      - in: "body"
        name: "configurations"
        description: "The configuration map can contain a subset of the attributes\
          \ of the schema, which are to be updated."
        required: true
        schema:
          $ref: "#/definitions/Configurations"
        x-exportParamName: "Configurations"
      responses:
        200:
          description: "Modify system configurations successfully."
        401:
          description: "User need to log in first."
        403:
          description: "User does not have permission of admin role."
        500:
          description: "Unexpected internal errors."
  /email/ping:
    post:
      tags:
      - "Products"
      summary: "Test connection and authentication with email server."
      description: "Test connection and authentication with email server.\n"
      parameters:
      - in: "body"
        name: "settings"
        description: "Email server settings, if some of the settings are not assigned,\
          \ they will be read from system configuration."
        required: false
        schema:
          $ref: "#/definitions/EmailServerSetting"
        x-exportParamName: "Settings"
      responses:
        200:
          description: "Ping email server successfully."
        400:
          description: "Inviald email server settings."
        401:
          description: "User need to login first."
        403:
          description: "Only admin has this authority."
        415:
          description: "The Media Type of the request is not supported, it has to\
            \ be \"application/json\""
        500:
          description: "Unexpected internal errors."
  /chartrepo/health:
    get:
      tags:
      - "Products"
      - "Chart Repository"
      summary: "Check the health of chart repository service."
      description: "Check the health of chart repository service."
      parameters: []
      responses:
        200:
          description: "Health status of chart repository service is returned."
          schema:
            type: "object"
            properties:
              healthy:
                type: "boolean"
        401:
          $ref: "#/definitions/UnauthorizedChartAPIError"
        403:
          $ref: "#/definitions/ForbiddenChartAPIError"
  /chartrepo/{repo}/charts:
    get:
      tags:
      - "Products"
      - "Chart Repository"
      summary: "Get all the charts under the specified project"
      description: "Get all the charts under the specified project"
      parameters:
      - name: "repo"
        in: "path"
        description: "The project name"
        required: true
        type: "string"
        x-exportParamName: "Repo"
      responses:
        200:
          description: "Searched for charts of project in Harbor successfully."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ChartInfoEntry"
        401:
          $ref: "#/definitions/UnauthorizedChartAPIError"
        403:
          $ref: "#/definitions/ForbiddenChartAPIError"
        500:
          $ref: "#/definitions/InternalChartAPIError"
    post:
      tags:
      - "Products"
      - "Chart Repository"
      summary: "Upload a chart file to the specified project."
      description: "Upload a chart file to the specified project. With this API, the\
        \ corresponding provance file can be uploaded together with chart file at\
        \ once."
      consumes:
      - "multipart/form-data"
      parameters:
      - name: "repo"
        in: "path"
        description: "The project name"
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - name: "chart"
        in: "formData"
        description: "The chart file"
        required: true
        type: "file"
        x-exportParamName: "Chart"
      - name: "prov"
        in: "formData"
        description: "The provance file"
        required: false
        type: "file"
        x-exportParamName: "Prov"
      responses:
        201:
          description: "The specified chart is successfully uploaded."
        401:
          $ref: "#/definitions/UnauthorizedChartAPIError"
        403:
          $ref: "#/definitions/ForbiddenChartAPIError"
        500:
          $ref: "#/definitions/InternalChartAPIError"
        507:
          $ref: "#/definitions/InsufficientStorageChartAPIError"
  /chartrepo/{repo}/charts/{name}:
    get:
      tags:
      - "Products"
      - "Chart Repository"
      summary: "Get all the versions of the specified chart"
      description: "Get all the versions of the specified chart"
      parameters:
      - name: "repo"
        in: "path"
        description: "The project name"
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - name: "name"
        in: "path"
        description: "The chart name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      responses:
        200:
          $ref: "#/definitions/ChartVersions"
        401:
          $ref: "#/definitions/UnauthorizedChartAPIError"
        403:
          $ref: "#/definitions/ForbiddenChartAPIError"
        404:
          $ref: "#/definitions/NotFoundChartAPIError"
        500:
          $ref: "#/definitions/InternalChartAPIError"
    delete:
      tags:
      - "Products"
      - "Chart Repository"
      summary: "Delete all the versions of the specified chart"
      description: "Delete all the versions of the specified chart"
      parameters:
      - name: "repo"
        in: "path"
        description: "The project name"
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - name: "name"
        in: "path"
        description: "The chart name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      responses:
        200:
          description: "The specified chart entry is successfully deleted."
        401:
          $ref: "#/definitions/UnauthorizedChartAPIError"
        403:
          $ref: "#/definitions/ForbiddenChartAPIError"
        500:
          $ref: "#/definitions/InternalChartAPIError"
  /chartrepo/{repo}/charts/{name}/{version}:
    get:
      tags:
      - "Products"
      - "Chart Repository"
      summary: "Get the specified chart version"
      description: "Get the specified chart version"
      parameters:
      - name: "repo"
        in: "path"
        description: "The project name"
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - name: "name"
        in: "path"
        description: "The chart name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "version"
        in: "path"
        description: "The chart version"
        required: true
        type: "string"
        x-exportParamName: "Version"
      responses:
        200:
          $ref: "#/definitions/ChartVersionDetails"
        401:
          $ref: "#/definitions/UnauthorizedChartAPIError"
        403:
          $ref: "#/definitions/ForbiddenChartAPIError"
        404:
          $ref: "#/definitions/NotFoundChartAPIError"
        500:
          $ref: "#/definitions/InternalChartAPIError"
    delete:
      tags:
      - "Products"
      - "Chart Repository"
      summary: "Delete the specified chart version"
      description: "Delete the specified chart version"
      parameters:
      - name: "repo"
        in: "path"
        description: "The project name"
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - name: "name"
        in: "path"
        description: "The chart name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "version"
        in: "path"
        description: "The chart version"
        required: true
        type: "string"
        x-exportParamName: "Version"
      responses:
        200:
          description: "The specified chart entry is successfully deleted."
        401:
          $ref: "#/definitions/UnauthorizedChartAPIError"
        403:
          $ref: "#/definitions/ForbiddenChartAPIError"
        404:
          $ref: "#/definitions/NotFoundChartAPIError"
        500:
          $ref: "#/definitions/InternalChartAPIError"
  /chartrepo/{repo}/prov:
    post:
      tags:
      - "Products"
      - "Chart Repository"
      summary: "Upload a provance file to the specified project."
      description: "Upload a provance file to the specified project. The provance\
        \ file should be targeted for an existing chart file."
      consumes:
      - "multipart/form-data"
      parameters:
      - name: "repo"
        in: "path"
        description: "The project name"
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - name: "prov"
        in: "formData"
        description: "The provance file"
        required: true
        type: "file"
        x-exportParamName: "Prov"
      responses:
        201:
          description: "The provance file is successfully uploaded."
        401:
          $ref: "#/definitions/UnauthorizedChartAPIError"
        403:
          $ref: "#/definitions/ForbiddenChartAPIError"
        500:
          $ref: "#/definitions/InternalChartAPIError"
        507:
          $ref: "#/definitions/InsufficientStorageChartAPIError"
  /chartrepo/charts:
    post:
      tags:
      - "Products"
      - "Chart Repository"
      summary: "Upload a chart file to the defult 'library' project."
      description: "Upload a chart file to the default 'library' project. Uploading\
        \ together with the prov file at the same time is also supported."
      consumes:
      - "multipart/form-data"
      parameters:
      - name: "chart"
        in: "formData"
        description: "The chart file"
        required: true
        type: "file"
        x-exportParamName: "Chart"
      - name: "prov"
        in: "formData"
        description: "The provance file"
        required: false
        type: "file"
        x-exportParamName: "Prov"
      responses:
        201:
          description: "The specified chart is successfully uploaded."
        401:
          $ref: "#/definitions/UnauthorizedChartAPIError"
        403:
          $ref: "#/definitions/ForbiddenChartAPIError"
        500:
          $ref: "#/definitions/InternalChartAPIError"
        507:
          $ref: "#/definitions/InsufficientStorageChartAPIError"
  /chartrepo/{repo}/charts/{name}/{version}/labels:
    get:
      tags:
      - "Products"
      - "Chart Repository"
      - "Label"
      summary: "Return the attahced labels of chart."
      description: "Return the attahced labels of the specified chart version."
      parameters:
      - name: "repo"
        in: "path"
        description: "The project name"
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - name: "name"
        in: "path"
        description: "The chart name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "version"
        in: "path"
        description: "The chart version"
        required: true
        type: "string"
        x-exportParamName: "Version"
      responses:
        200:
          $ref: "#/definitions/Labels"
        401:
          $ref: "#/definitions/UnauthorizedChartAPIError"
        403:
          $ref: "#/definitions/ForbiddenChartAPIError"
        404:
          $ref: "#/definitions/NotFoundChartAPIError"
        500:
          $ref: "#/definitions/InternalChartAPIError"
    post:
      tags:
      - "Products"
      - "Chart Repository"
      - "Label"
      summary: "Mark label to chart."
      description: "Mark label to the specified chart version."
      parameters:
      - name: "repo"
        in: "path"
        description: "The project name"
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - name: "name"
        in: "path"
        description: "The chart name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "version"
        in: "path"
        description: "The chart version"
        required: true
        type: "string"
        x-exportParamName: "Version"
      - in: "body"
        name: "label"
        description: "The label being marked to the chart version"
        required: true
        schema:
          $ref: "#/definitions/Label"
        x-exportParamName: "Label"
      responses:
        200:
          description: "The label is successfully marked to the chart version."
        400:
          $ref: "#/definitions/BadRequestFormatedError"
        401:
          $ref: "#/definitions/UnauthorizedChartAPIError"
        403:
          $ref: "#/definitions/ForbiddenChartAPIError"
        404:
          $ref: "#/definitions/NotFoundChartAPIError"
        409:
          $ref: "#/definitions/ConflictFormatedError"
        500:
          $ref: "#/definitions/InternalChartAPIError"
  /chartrepo/{repo}/charts/{name}/{version}/labels/{id}:
    delete:
      tags:
      - "Products"
      - "Chart Repository"
      - "Label"
      summary: "Remove label from chart."
      description: "Remove label from the specified chart version."
      parameters:
      - name: "repo"
        in: "path"
        description: "The project name"
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - name: "name"
        in: "path"
        description: "The chart name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "version"
        in: "path"
        description: "The chart version"
        required: true
        type: "string"
        x-exportParamName: "Version"
      - name: "id"
        in: "path"
        description: "The label ID"
        required: true
        type: "integer"
        x-exportParamName: "Id"
      responses:
        200:
          description: "The label is successfully unmarked from the chart version."
        400:
          $ref: "#/definitions/BadRequestFormatedError"
        401:
          $ref: "#/definitions/UnauthorizedChartAPIError"
        403:
          $ref: "#/definitions/ForbiddenChartAPIError"
        404:
          $ref: "#/definitions/NotFoundChartAPIError"
        500:
          $ref: "#/definitions/InternalChartAPIError"
  /projects/{project_id}/robots:
    get:
      tags:
      - "Products"
      - "Robot Account"
      summary: "Get all robot accounts of specified project"
      description: "Get all robot accounts of specified project"
      parameters:
      - name: "project_id"
        in: "path"
        description: "Relevant project ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ProjectId"
      responses:
        200:
          description: "Get project robot accounts successfully."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/RobotAccount"
        400:
          description: "The project id is invalid."
        401:
          description: "User need to log in first."
        403:
          description: "User in session does not have permission to the project."
        404:
          description: "Project ID does not exist."
        500:
          description: "Unexpected internal errors."
    post:
      tags:
      - "Products"
      - "Robot Account"
      summary: "Create a robot account for project"
      description: "Create a robot account for project"
      parameters:
      - name: "project_id"
        in: "path"
        description: "Relevant project ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ProjectId"
      - in: "body"
        name: "robot"
        description: "Request body of creating a robot account."
        required: true
        schema:
          $ref: "#/definitions/RobotAccountCreate"
        x-exportParamName: "Robot"
      responses:
        201:
          description: "Project member created successfully."
          schema:
            $ref: "#/definitions/RobotAccountPostRep"
        400:
          description: "Project id is not valid."
        401:
          description: "User need to log in first."
        403:
          description: "User in session does not have permission to the project."
        409:
          description: "An robot account with same name already exist in the project."
        500:
          description: "Unexpected internal errors."
  /projects/{project_id}/robots/{robot_id}:
    get:
      tags:
      - "Products"
      - "Robot Account"
      summary: "Return the infor of the specified robot account."
      description: "Return the infor of the specified robot account."
      parameters:
      - name: "project_id"
        in: "path"
        description: "Relevant project ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ProjectId"
      - name: "robot_id"
        in: "path"
        description: "The ID of robot account."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "RobotId"
      responses:
        200:
          description: "Robot account information."
          schema:
            $ref: "#/definitions/RobotAccount"
        401:
          description: "User need to log in first."
        403:
          description: "User in session does not have permission to the project."
        404:
          description: "The robot account is not found."
        500:
          description: "Unexpected internal errors."
    put:
      tags:
      - "Products"
      - "Robot Account"
      summary: "Update status of robot account."
      description: "Used to disable/enable a specified robot account."
      parameters:
      - name: "project_id"
        in: "path"
        description: "Relevant project ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ProjectId"
      - name: "robot_id"
        in: "path"
        description: "The ID of robot account."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "RobotId"
      - in: "body"
        name: "robot"
        description: "Request body of enable/disable a robot account."
        required: true
        schema:
          $ref: "#/definitions/RobotAccountUpdate"
        x-exportParamName: "Robot"
      responses:
        200:
          description: "Robot account has been modified success."
        500:
          description: "Unexpected internal errors."
    delete:
      tags:
      - "Products"
      - "Robot Account"
      summary: "Delete the specified robot account"
      description: "Delete the specified robot account"
      parameters:
      - name: "project_id"
        in: "path"
        description: "Relevant project ID."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "ProjectId"
      - name: "robot_id"
        in: "path"
        description: "The ID of robot account."
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "RobotId"
      responses:
        200:
          description: "The specified robot account is successfully deleted."
        401:
          description: "User need to log in first."
        403:
          description: "User in session does not have permission to the project."
        404:
          description: "The robot account is not found."
        500:
          description: "Unexpected internal errors."
securityDefinitions:
  basicAuth:
    type: "basic"
definitions:
  Search:
    type: "object"
    properties:
      project:
        type: "array"
        description: "Search results of the projects that matched the filter keywords."
        items:
          $ref: "#/definitions/Project"
      repository:
        type: "array"
        description: "Search results of the repositories that matched the filter keywords."
        items:
          $ref: "#/definitions/SearchRepository"
      chart:
        type: "array"
        description: "Search results of the charts that macthed the filter keywords."
        items:
          $ref: "#/definitions/SearchResult"
    example:
      project:
      - creation_time: "creation_time"
        update_time: "update_time"
        togglable: true
        current_user_role_id: 1
        metadata:
          severity: "severity"
          prevent_vul: "prevent_vul"
          public: "public"
          auto_scan: "auto_scan"
          enable_content_trust: "enable_content_trust"
        deleted: true
        owner_name: "owner_name"
        project_id: 0
        owner_id: 6
        name: "name"
        repo_count: 5
        chart_count: 5
      - creation_time: "creation_time"
        update_time: "update_time"
        togglable: true
        current_user_role_id: 1
        metadata:
          severity: "severity"
          prevent_vul: "prevent_vul"
          public: "public"
          auto_scan: "auto_scan"
          enable_content_trust: "enable_content_trust"
        deleted: true
        owner_name: "owner_name"
        project_id: 0
        owner_id: 6
        name: "name"
        repo_count: 5
        chart_count: 5
      repository:
      - project_id: 2
        tags_count: 9
        project_name: "project_name"
        repository_name: "repository_name"
        pull_count: 7
        project_public: true
      - project_id: 2
        tags_count: 9
        project_name: "project_name"
        repository_name: "repository_name"
        pull_count: 7
        project_public: true
      chart:
      - score: 3
        name: "name"
        chart: ""
      - score: 3
        name: "name"
        chart: ""
  RetagReq:
    type: "object"
    properties:
      tag:
        type: "string"
        description: "new tag to be created"
      src_image:
        type: "string"
        description: "Source image to be retagged, e.g. 'stage/app:v1.0'"
      override:
        type: "boolean"
        description: "If target tag already exists, whether to override it"
    example:
      src_image: "src_image"
      tag: "tag"
      override: true
  SearchRepository:
    type: "object"
    properties:
      project_id:
        type: "integer"
        description: "The ID of the project that the repository belongs to"
      project_name:
        type: "string"
        description: "The name of the project that the repository belongs to"
      project_public:
        type: "boolean"
        description: "The flag to indicate the publicity of the project that the repository\
          \ belongs to (1 is public, 0 is not)"
      repository_name:
        type: "string"
        description: "The name of the repository"
      pull_count:
        type: "integer"
        description: "The count how many times the repository is pulled"
      tags_count:
        type: "integer"
        description: "The count of tags in the repository"
    example:
      project_id: 2
      tags_count: 9
      project_name: "project_name"
      repository_name: "repository_name"
      pull_count: 7
      project_public: true
  ProjectReq:
    type: "object"
    properties:
      project_name:
        type: "string"
        description: "The name of the project."
      metadata:
        description: "The metadata of the project."
        $ref: "#/definitions/ProjectMetadata"
    example:
      metadata:
        severity: "severity"
        prevent_vul: "prevent_vul"
        public: "public"
        auto_scan: "auto_scan"
        enable_content_trust: "enable_content_trust"
      project_name: "project_name"
  Project:
    type: "object"
    properties:
      project_id:
        type: "integer"
        format: "int32"
        description: "Project ID"
      owner_id:
        type: "integer"
        format: "int32"
        description: "The owner ID of the project always means the creator of the\
          \ project."
      name:
        type: "string"
        description: "The name of the project."
      creation_time:
        type: "string"
        description: "The creation time of the project."
      update_time:
        type: "string"
        description: "The update time of the project."
      deleted:
        type: "boolean"
        description: "A deletion mark of the project."
      owner_name:
        type: "string"
        description: "The owner name of the project."
      togglable:
        type: "boolean"
        description: "Correspond to the UI about whether the project's publicity is\
          \  updatable (for UI)"
      current_user_role_id:
        type: "integer"
        description: "The role ID of the current user who triggered the API (for UI)"
      repo_count:
        type: "integer"
        description: "The number of the repositories under this project."
      chart_count:
        type: "integer"
        description: "The total number of charts under this project."
      metadata:
        description: "The metadata of the project."
        $ref: "#/definitions/ProjectMetadata"
    example:
      creation_time: "creation_time"
      update_time: "update_time"
      togglable: true
      current_user_role_id: 1
      metadata:
        severity: "severity"
        prevent_vul: "prevent_vul"
        public: "public"
        auto_scan: "auto_scan"
        enable_content_trust: "enable_content_trust"
      deleted: true
      owner_name: "owner_name"
      project_id: 0
      owner_id: 6
      name: "name"
      repo_count: 5
      chart_count: 5
  ProjectMetadata:
    type: "object"
    properties:
      public:
        type: "string"
        description: "The public status of the project. The valid values are \"true\"\
          , \"false\"."
      enable_content_trust:
        type: "string"
        description: "Whether content trust is enabled or not. If it is enabled, user\
          \ cann't pull unsigned images from this project. The valid values are \"\
          true\", \"false\"."
      prevent_vul:
        type: "string"
        description: "Whether prevent the vulnerable images from running. The valid\
          \ values are \"true\", \"false\"."
      severity:
        type: "string"
        description: "If the vulnerability is high than severity defined here, the\
          \ images cann't be pulled. The valid values are \"negligible\", \"low\"\
          , \"medium\", \"high\", \"critical\"."
      auto_scan:
        type: "string"
        description: "Whether scan images automatically when pushing. The valid values\
          \ are \"true\", \"false\"."
    example:
      severity: "severity"
      prevent_vul: "prevent_vul"
      public: "public"
      auto_scan: "auto_scan"
      enable_content_trust: "enable_content_trust"
  Manifest:
    type: "object"
    properties:
      manifest:
        type: "object"
        description: "The detail of manifest."
        properties: {}
      config:
        type: "string"
        description: "The config of the repository."
    example:
      manifest: "{}"
      config: "config"
  User:
    type: "object"
    properties:
      user_id:
        type: "integer"
        format: "int"
        description: "The ID of the user."
      username:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      realname:
        type: "string"
      comment:
        type: "string"
      deleted:
        type: "boolean"
      role_name:
        type: "string"
      role_id:
        type: "integer"
        format: "int"
      has_admin_role:
        type: "boolean"
      reset_uuid:
        type: "string"
      Salt:
        type: "string"
      creation_time:
        type: "string"
      update_time:
        type: "string"
    example:
      creation_time: "creation_time"
      has_admin_role: true
      realname: "realname"
      role_name: "role_name"
      Salt: "Salt"
      password: "password"
      update_time: "update_time"
      deleted: true
      user_id: 0
      role_id: 6
      comment: "comment"
      email: "email"
      username: "username"
      reset_uuid: "reset_uuid"
  UserSearch:
    type: "object"
    properties:
      user_id:
        type: "integer"
        format: "int"
        description: "The ID of the user."
      username:
        type: "string"
    example:
      user_id: 0
      username: "username"
  Password:
    type: "object"
    properties:
      old_password:
        type: "string"
        description: "The user's existing password."
      new_password:
        type: "string"
        description: "New password for marking as to be updated."
    example:
      old_password: "old_password"
      new_password: "new_password"
  AccessLog:
    type: "object"
    properties:
      log_id:
        type: "integer"
        description: "The ID of the log entry."
      username:
        type: "string"
        description: "Username of the user in this log entry."
      repo_name:
        type: "string"
        description: "Name of the repository in this log entry."
      repo_tag:
        type: "string"
        description: "Tag of the repository in this log entry."
      operation:
        type: "string"
        description: "The operation against the repository in this log entry."
      op_time:
        type: "string"
        description: "The time when this operation is triggered."
    example:
      log_id: 0
      op_time: "op_time"
      repo_name: "repo_name"
      operation: "operation"
      repo_tag: "repo_tag"
      username: "username"
  Role:
    type: "object"
    properties:
      role_id:
        type: "integer"
        format: "int32"
        description: "ID in table."
      role_code:
        type: "string"
        description: "Description of permissions for the role."
      role_name:
        type: "string"
        description: "Name the the role."
      role_mask:
        type: "string"
  RoleParam:
    type: "object"
    properties:
      roles:
        type: "array"
        description: "Role ID for updating project role member."
        items:
          type: "integer"
          format: "int32"
      username:
        type: "string"
        description: "Username relevant to a project role member."
  StatisticMap:
    type: "object"
    properties:
      private_project_count:
        type: "integer"
        format: "int32"
        description: "The count of the private projects which the user is a member\
          \ of."
      private_repo_count:
        type: "integer"
        format: "int32"
        description: "The count of the private repositories belonging to the projects\
          \ which the user is a member of."
      public_project_count:
        type: "integer"
        format: "int32"
        description: "The count of the public projects."
      public_repo_count:
        type: "integer"
        format: "int32"
        description: "The count of the public repositories belonging to the public\
          \ projects which the user is a member of."
      total_project_count:
        type: "integer"
        format: "int32"
        description: "The count of the total projects, only be seen when the is admin."
      total_repo_count:
        type: "integer"
        format: "int32"
        description: "The count of the total repositories, only be seen when the user\
          \ is admin."
    example:
      private_project_count: 0
      public_repo_count: 5
      total_repo_count: 2
      total_project_count: 5
      private_repo_count: 6
      public_project_count: 1
  JobStatus:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "The job ID."
      status:
        type: "string"
        description: "The status of the job."
      repository:
        type: "string"
        description: "The repository handled by the job."
      policy_id:
        type: "integer"
        format: "int64"
        description: "The ID of the policy that triggered this job."
      operation:
        type: "string"
        description: "The operation of the job."
      tags:
        type: "array"
        description: "The repository's used tag list."
        items:
          $ref: "#/definitions/Tags"
      creation_time:
        type: "string"
        description: "The creation time of the job."
      update_time:
        type: "string"
        description: "The update time of the job."
  Tags:
    type: "object"
    properties:
      tag:
        type: "string"
        description: "The repository's used tag."
  ReplicationPolicy:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "The policy ID."
      name:
        type: "string"
        description: "The policy name."
      description:
        type: "string"
        description: "The description of the policy."
      src_registry:
        description: "The source registry."
        $ref: "#/definitions/Registry"
      dest_registry:
        description: "The destination registry."
        $ref: "#/definitions/Registry"
      dest_namespace:
        type: "string"
        description: "The destination namespace."
      trigger:
        $ref: "#/definitions/ReplicationTrigger"
      filters:
        type: "array"
        description: "The replication policy filter array."
        items:
          $ref: "#/definitions/ReplicationFilter"
      deletion:
        type: "boolean"
        description: "Whether to replicate the deletion operation."
      override:
        type: "boolean"
        description: "Whether to override the resources on the destination registry."
      enabled:
        type: "boolean"
        description: "Whether the policy is enabled or not."
      creation_time:
        type: "string"
        description: "The create time of the policy."
      update_time:
        type: "string"
        description: "The update time of the policy."
    example:
      creation_time: "creation_time"
      description: "description"
      trigger:
        trigger_settings:
          cron: "cron"
        type: "type"
      filters:
      - type: "type"
        value: "value"
      - type: "type"
        value: "value"
      enabled: true
      update_time: "update_time"
      dest_registry:
        creation_time: "creation_time"
        update_time: "update_time"
        credential:
          access_key: "access_key"
          access_secret: "access_secret"
          type: "type"
        name: "name"
        insecure: true
        description: "description"
        id: 6
        type: "type"
        url: "url"
        status: "status"
      src_registry:
        creation_time: "creation_time"
        update_time: "update_time"
        credential:
          access_key: "access_key"
          access_secret: "access_secret"
          type: "type"
        name: "name"
        insecure: true
        description: "description"
        id: 6
        type: "type"
        url: "url"
        status: "status"
      deletion: true
      name: "name"
      dest_namespace: "dest_namespace"
      id: 0
      override: true
  ReplicationTrigger:
    type: "object"
    properties:
      type:
        type: "string"
        description: "The replication policy trigger type. The valid values are manual,\
          \ event_based and scheduled."
      trigger_settings:
        $ref: "#/definitions/TriggerSettings"
    example:
      trigger_settings:
        cron: "cron"
      type: "type"
  TriggerSettings:
    type: "object"
    properties:
      cron:
        type: "string"
        description: "The cron string for scheduled trigger"
    example:
      cron: "cron"
  ReplicationFilter:
    type: "object"
    properties:
      type:
        type: "string"
        description: "The replication policy filter type."
      value:
        type: "string"
        description: "The value of replication policy filter."
    example:
      type: "type"
      value: "value"
  RegistryCredential:
    type: "object"
    properties:
      type:
        type: "string"
        description: "Credential type, such as 'basic', 'oauth'."
      access_key:
        type: "string"
        description: "Access key, e.g. user name when credential type is 'basic'."
      access_secret:
        type: "string"
        description: "Access secret, e.g. password when credential type is 'basic'."
    example:
      access_key: "access_key"
      access_secret: "access_secret"
      type: "type"
  Registry:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "The registry ID."
      url:
        type: "string"
        description: "The registry URL string."
      name:
        type: "string"
        description: "The registry name."
      credential:
        $ref: "#/definitions/RegistryCredential"
      type:
        type: "string"
        description: "Type of the registry, e.g. 'harbor'."
      insecure:
        type: "boolean"
        description: "Whether or not the certificate will be verified when Harbor\
          \ tries to access the server."
      description:
        type: "string"
        description: "Description of the registry."
      status:
        type: "string"
        description: "Health status of the registry."
      creation_time:
        type: "string"
        description: "The create time of the policy."
      update_time:
        type: "string"
        description: "The update time of the policy."
    example:
      creation_time: "creation_time"
      update_time: "update_time"
      credential:
        access_key: "access_key"
        access_secret: "access_secret"
        type: "type"
      name: "name"
      insecure: true
      description: "description"
      id: 6
      type: "type"
      url: "url"
      status: "status"
  PingRegistry:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "The ID of the registry"
      type:
        type: "string"
        description: "Type of the registry, e.g. 'harbor'."
      url:
        type: "string"
        description: "The registry address URL string."
      credential_type:
        type: "string"
        description: "Credential type of the registry, e.g. 'basic'."
      access_key:
        type: "string"
        description: "The registry access key."
      access_secret:
        type: "string"
        description: "The registry access secret."
      insecure:
        type: "boolean"
        description: "Whether or not the certificate will be verified when Harbor\
          \ tries to access the server."
  PutRegistry:
    type: "object"
    properties:
      name:
        type: "string"
        description: "The registry name."
      description:
        type: "string"
        description: "Description of the registry."
      url:
        type: "string"
        description: "The registry address URL string."
      credential_type:
        type: "string"
        description: "Credential type of the registry, e.g. 'basic'."
      access_key:
        type: "string"
        description: "The registry access key."
      access_secret:
        type: "string"
        description: "The registry access secret."
      insecure:
        type: "boolean"
        description: "Whether or not the certificate will be verified when Harbor\
          \ tries to access the server."
    example:
      credential_type: "credential_type"
      access_key: "access_key"
      name: "name"
      access_secret: "access_secret"
      insecure: true
      description: "description"
      url: "url"
  HasAdminRole:
    type: "object"
    properties:
      has_admin_role:
        type: "boolean"
        description: "1-has admin, 0-not."
    example:
      has_admin_role: true
  UserProfile:
    type: "object"
    properties:
      email:
        type: "string"
        description: "The new email."
      realname:
        type: "string"
        description: "The new realname."
      comment:
        type: "string"
        description: "The new comment."
    example:
      comment: "comment"
      email: "email"
      realname: "realname"
  Storage:
    type: "object"
    properties:
      total:
        type: "integer"
        format: "int64"
        description: "Total volume size."
      free:
        type: "integer"
        format: "int64"
        description: "Free volume size."
    example:
      total: 0
      free: 6
  GeneralInfo:
    type: "object"
    properties:
      with_notary:
        type: "boolean"
        description: "If the Harbor instance is deployed with nested notary."
      with_clair:
        type: "boolean"
        description: "If the Harbor instance is deployed with nested clair."
      with_admiral:
        type: "boolean"
        description: "If the Harbor instance is deployed with Admiral."
      admiral_endpoint:
        type: "string"
        description: "The url of the endpoint of admiral instance."
      registry_url:
        type: "string"
        description: "The url of registry against which the docker command should\
          \ be issued."
      external_url:
        type: "string"
        description: "The external URL of Harbor, with protocol."
      auth_mode:
        type: "string"
        description: "The auth mode of current Harbor instance."
      project_creation_restriction:
        type: "string"
        description: "Indicate who can create projects, it could be 'adminonly' or\
          \ 'everyone'."
      self_registration:
        type: "boolean"
        description: "Indicate whether the Harbor instance enable user to register\
          \ himself."
      has_ca_root:
        type: "boolean"
        description: "Indicate whether there is a ca root cert file ready for download\
          \ in the file system."
      harbor_version:
        type: "string"
        description: "The build version of Harbor."
      next_scan_all:
        type: "integer"
        description: "The UTC time in milliseconds, after which user can call scanAll\
          \ API to scan all images."
      clair_vulnerability_status:
        $ref: "#/definitions/GeneralInfo_clair_vulnerability_status"
    example:
      registry_url: "registry_url"
      self_registration: true
      admiral_endpoint: "admiral_endpoint"
      auth_mode: "auth_mode"
      with_notary: true
      project_creation_restriction: "project_creation_restriction"
      with_clair: true
      with_admiral: true
      external_url: "external_url"
      has_ca_root: true
      clair_vulnerability_status:
        overall_last_update: 6
        details:
        - last_update: 1
          namespace: "namespace"
        - last_update: 1
          namespace: "namespace"
      harbor_version: "harbor_version"
      next_scan_all: 0
  VulnNamespaceTimestamp:
    type: "object"
    properties:
      namespace:
        type: "string"
        description: "The namespace of the Vulnerability"
      last_update:
        type: "integer"
        description: "The UTC timestamp in miliseconds of last successful update for\
          \ vulnerability data."
    example:
      last_update: 1
      namespace: "namespace"
  SystemInfo:
    type: "object"
    properties:
      storage:
        type: "array"
        description: "The storage of system."
        items:
          $ref: "#/definitions/Storage"
    example:
      storage:
      - total: 0
        free: 6
      - total: 0
        free: 6
  LdapConf:
    type: "object"
    properties:
      ldap_url:
        type: "string"
        description: "The url of ldap service."
      ldap_search_dn:
        type: "string"
        description: "The search dn of ldap service."
      ldap_search_password:
        type: "string"
        description: "The search password of ldap service."
      ldap_base_dn:
        type: "string"
        description: "The base dn of ldap service."
      ldap_filter:
        type: "string"
        description: "The serach filter of ldap service."
      ldap_uid:
        type: "string"
        description: "The serach uid from ldap service attributes."
      ldap_scope:
        type: "integer"
        format: "int64"
        description: "The serach scope of ldap service."
      ldap_connection_timeout:
        type: "integer"
        format: "int64"
        description: "The connect timeout of ldap service(second)."
    example:
      ldap_search_dn: "ldap_search_dn"
      ldap_uid: "ldap_uid"
      ldap_filter: "ldap_filter"
      ldap_base_dn: "ldap_base_dn"
      ldap_url: "ldap_url"
      ldap_search_password: "ldap_search_password"
      ldap_connection_timeout: 6
      ldap_scope: 0
  LdapUsers:
    type: "object"
    properties:
      ldap_username:
        type: "string"
        description: "search ldap user name based on ldapconf."
      ldap_realname:
        type: "string"
        description: "system will try to guess the user realname form \"uid\" or \"\
          cn\" attribute."
      ldap_email:
        type: "string"
        description: "system will try to guess the user email address form \"mail\"\
          \ or \"email\" attribute."
    example:
      ldap_realname: "ldap_realname"
      ldap_email: "ldap_email"
      ldap_username: "ldap_username"
  LdapImportUsers:
    type: "object"
    properties:
      ldap_uid_list:
        type: "array"
        description: "selected uid list"
        items:
          type: "string"
    example:
      ldap_uid_list:
      - "ldap_uid_list"
      - "ldap_uid_list"
  LdapFailedImportUsers:
    type: "object"
    properties:
      ldap_uid:
        type: "string"
        description: "the uid can't add to system."
      error:
        type: "string"
        description: "fail reason."
  EmailServerSetting:
    type: "object"
    properties:
      email_host:
        type: "string"
        description: "The host of email server."
      email_port:
        type: "integer"
        description: "The port of email server."
      email_username:
        type: "string"
        description: "The username of email server."
      email_password:
        type: "string"
        description: "The password of email server."
      email_ssl:
        type: "boolean"
        description: "Use ssl/tls or not."
      email_identity:
        type: "string"
        description: "The dentity of email server."
    example:
      email_ssl: true
      email_identity: "email_identity"
      email_port: 0
      email_username: "email_username"
      email_host: "email_host"
      email_password: "email_password"
  RepoSignature:
    type: "object"
    properties:
      tag:
        type: "string"
        description: "The tag of image."
      hashes:
        type: "object"
        description: "The JSON object of the hash of the image."
        properties: {}
    example:
      hashes: "{}"
      tag: "tag"
  DetailedTag:
    type: "object"
    properties:
      digest:
        type: "string"
        description: "The digest of the tag."
      name:
        type: "string"
        description: "The name of the tag."
      size:
        type: "integer"
        description: "The size of the image."
      architecture:
        type: "string"
        description: "The architecture of the image."
      os:
        type: "string"
        description: "The os of the image."
      docker_version:
        type: "string"
        description: "The version of docker which builds the image."
      author:
        type: "string"
        description: "The author of the image."
      created:
        type: "string"
        description: "The build time of the image."
      signature:
        type: "object"
        description: "The signature of image, defined by RepoSignature. If it is null,\
          \ the image is unsigned."
        properties: {}
      scan_overview:
        $ref: "#/definitions/DetailedTag_scan_overview"
      labels:
        type: "array"
        description: "The label list."
        items:
          $ref: "#/definitions/Label"
    example:
      size: 0
      os: "os"
      signature: "{}"
      author: "author"
      created: "created"
      digest: "digest"
      name: "name"
      scan_overview:
        severity: 1
        components:
          summary:
          - severity: 5
            count: 2
          - severity: 5
            count: 2
          total: 5
        scan_status: "scan_status"
        job_id: 6
        digest: "digest"
        details_key: "details_key"
      docker_version: "docker_version"
      architecture: "architecture"
      labels:
      - creation_time: "creation_time"
        update_time: "update_time"
        deleted: true
        color: "color"
        project_id: 7
        scope: "scope"
        name: "name"
        description: "description"
        id: 2
      - creation_time: "creation_time"
        update_time: "update_time"
        deleted: true
        color: "color"
        project_id: 7
        scope: "scope"
        name: "name"
        description: "description"
        id: 2
  ComponentOverviewEntry:
    type: "object"
    properties:
      severity:
        type: "integer"
        description: "1-None/Negligible, 2-Unknown, 3-Low, 4-Medium, 5-High"
      count:
        type: "integer"
        description: "number of the components with certain severity."
    example:
      severity: 5
      count: 2
  Repository:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "The ID of repository."
      name:
        type: "string"
        description: "The name of repository."
      project_id:
        type: "integer"
        description: "The project ID of repository."
      description:
        type: "string"
        description: "The description of repository."
      pull_count:
        type: "integer"
        description: "The pull count of repository."
      star_count:
        type: "integer"
        description: "The star count of repository."
      tags_count:
        type: "integer"
        description: "The tags count of repository."
      labels:
        type: "array"
        description: "The label list."
        items:
          $ref: "#/definitions/Label"
      creation_time:
        type: "string"
        description: "The creation time of repository."
      update_time:
        type: "string"
        description: "The update time of repository."
    example:
      creation_time: "creation_time"
      update_time: "update_time"
      project_id: 6
      tags_count: 5
      name: "name"
      description: "description"
      id: 0
      pull_count: 1
      star_count: 5
      labels:
      - creation_time: "creation_time"
        update_time: "update_time"
        deleted: true
        color: "color"
        project_id: 7
        scope: "scope"
        name: "name"
        description: "description"
        id: 2
      - creation_time: "creation_time"
        update_time: "update_time"
        deleted: true
        color: "color"
        project_id: 7
        scope: "scope"
        name: "name"
        description: "description"
        id: 2
  VulnerabilityItem:
    type: "object"
    properties:
      id:
        type: "string"
        description: "ID of the vulnerability, normally it is the CVE ID"
      severity:
        type: "integer"
        description: "1-Negligible, 2-Unknown, 3-Low, 4-Medium, 5-High"
      package:
        type: "string"
        description: "The packge that introduces the vulnerability."
      version:
        type: "string"
        description: "The version of the package."
      description:
        type: "string"
        description: "The description of the vulnerability."
      fixedVersion:
        type: "string"
        description: "The version which the vulnerability is fixed, this is an optional\
          \ property."
    example:
      severity: 0
      fixedVersion: "fixedVersion"
      package: "package"
      description: "description"
      id: "id"
      version: "version"
  Configurations:
    type: "object"
    properties:
      auth_mode:
        type: "string"
        description: "The auth mode of current system, such as \"db_auth\", \"ldap_auth\""
      email_from:
        type: "string"
        description: "The sender name for Email notification."
      email_host:
        type: "string"
        description: "The hostname of SMTP server that sends Email notification."
      email_port:
        type: "integer"
        description: "The port of SMTP server."
      email_identity:
        type: "string"
        description: "By default it's empty so the email_username is picked."
      email_username:
        type: "string"
        description: "The username for authenticate against SMTP server."
      email_ssl:
        type: "boolean"
        description: "When it's set to true the system will access Email server via\
          \ TLS by default.  If it's set to false, it still will handle \"STARTTLS\"\
          \ from server side."
      email_insecure:
        type: "boolean"
        description: "Whether or not the certificate will be verified when Harbor\
          \ tries to access the email server."
      ldap_url:
        type: "string"
        description: "The URL of LDAP server."
      ldap_base_dn:
        type: "string"
        description: "The Base DN for LDAP binding."
      ldap_filter:
        type: "string"
        description: "The filter for LDAP binding."
      ldap_scope:
        type: "integer"
        description: "0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREE"
      ldap_uid:
        type: "string"
        description: "The attribute which is used as identity for the LDAP binding,\
          \ such as \"CN\" or \"SAMAccountname\""
      ldap_search_dn:
        type: "string"
        description: "The DN of the user to do the search."
      ldap_timeout:
        type: "integer"
        description: "timeout in seconds for connection to LDAP server."
      ldap_group_attribute_name:
        type: "string"
        description: "The attribute which is used as identity of the LDAP group, default\
          \ is cn."
      ldap_group_base_dn:
        type: "string"
        description: "The base DN to search LDAP group."
      ldap_group_search_filter:
        type: "string"
        description: "The filter to search the ldap group."
      ldap_group_search_scope:
        type: "integer"
        description: "The scope to search ldap. '0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL,\
          \ 2-LDAP_SCOPE_SUBTREE'"
      ldap_group_admin_dn:
        type: "string"
        description: "Specify the ldap group which have the same privilege with Harbor\
          \ admin."
      project_creation_restriction:
        type: "string"
        description: "This attribute restricts what users have the permission to create\
          \ project.  It can be \"everyone\" or \"adminonly\"."
      read_only:
        type: "boolean"
        description: "'docker push' is prohibited by Harbor if you set it to true.\
          \   "
      self_registration:
        type: "boolean"
        description: "Whether the Harbor instance supports self-registration.  If\
          \ it's set to false, admin need to add user to the instance."
      token_expiration:
        type: "integer"
        description: "The expiration time of the token for internal Registry, in minutes."
      verify_remote_cert:
        type: "boolean"
        description: "Whether or not the certificate will be verified when Harbor\
          \ tries to access a remote Harbor instance for replication."
      scan_all_policy:
        $ref: "#/definitions/Configurations_scan_all_policy"
    example:
      email_ssl: true
      ldap_timeout: 1
      ldap_filter: "ldap_filter"
      auth_mode: "auth_mode"
      ldap_group_admin_dn: "ldap_group_admin_dn"
      ldap_group_base_dn: "ldap_group_base_dn"
      email_port: 0
      email_insecure: true
      read_only: true
      ldap_group_attribute_name: "ldap_group_attribute_name"
      ldap_url: "ldap_url"
      token_expiration: 5
      ldap_scope: 6
      ldap_group_search_filter: "ldap_group_search_filter"
      self_registration: true
      email_username: "email_username"
      ldap_base_dn: "ldap_base_dn"
      ldap_group_search_scope: 5
      project_creation_restriction: "project_creation_restriction"
      verify_remote_cert: true
      scan_all_policy:
        parameter:
          daily_time: 1
        type: "type"
      email_identity: "email_identity"
      ldap_search_dn: "ldap_search_dn"
      ldap_uid: "ldap_uid"
      email_from: "email_from"
      email_host: "email_host"
  ConfigurationsResponse:
    type: "object"
    properties:
      auth_mode:
        description: "The auth mode of current system, such as \"db_auth\", \"ldap_auth\""
        $ref: "#/definitions/StringConfigItem"
      email_from:
        description: "The sender name for Email notification."
        $ref: "#/definitions/StringConfigItem"
      email_host:
        description: "The hostname of SMTP server that sends Email notification."
        $ref: "#/definitions/StringConfigItem"
      email_port:
        description: "The port of SMTP server."
        $ref: "#/definitions/IntegerConfigItem"
      email_identity:
        description: "By default it's empty so the email_username is picked."
        $ref: "#/definitions/StringConfigItem"
      email_username:
        description: "The username for authenticate against SMTP server."
        $ref: "#/definitions/StringConfigItem"
      email_ssl:
        description: "When it's set to true the system will access Email server via\
          \ TLS by default.  If it's set to false, it still will handle \"STARTTLS\"\
          \ from server side."
        $ref: "#/definitions/BoolConfigItem"
      email_insecure:
        description: "Whether or not the certificate will be verified when Harbor\
          \ tries to access the email server."
        $ref: "#/definitions/BoolConfigItem"
      ldap_url:
        description: "The URL of LDAP server."
        $ref: "#/definitions/StringConfigItem"
      ldap_base_dn:
        description: "The Base DN for LDAP binding."
        $ref: "#/definitions/StringConfigItem"
      ldap_filter:
        description: "The filter for LDAP binding."
        $ref: "#/definitions/StringConfigItem"
      ldap_scope:
        type: "integer"
        description: "0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREE"
      ldap_uid:
        description: "The attribute which is used as identity for the LDAP binding,\
          \ such as \"CN\" or \"SAMAccountname\""
        $ref: "#/definitions/StringConfigItem"
      ldap_search_dn:
        type: "string"
        description: "The DN of the user to do the search."
      ldap_timeout:
        description: "timeout in seconds for connection to LDAP server."
        $ref: "#/definitions/IntegerConfigItem"
      ldap_group_attribute_name:
        description: "The attribute which is used as identity of the LDAP group, default\
          \ is cn."
        $ref: "#/definitions/StringConfigItem"
      ldap_group_base_dn:
        description: "The base DN to search LDAP group."
        $ref: "#/definitions/StringConfigItem"
      ldap_group_search_filter:
        description: "The filter to search the ldap group."
        $ref: "#/definitions/StringConfigItem"
      ldap_group_search_scope:
        description: "The scope to search ldap. '0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL,\
          \ 2-LDAP_SCOPE_SUBTREE'"
        $ref: "#/definitions/IntegerConfigItem"
      ldap_group_admin_dn:
        description: "Specify the ldap group which have the same privilege with Harbor\
          \ admin."
        $ref: "#/definitions/StringConfigItem"
      project_creation_restriction:
        description: "This attribute restricts what users have the permission to create\
          \ project.  It can be \"everyone\" or \"adminonly\"."
        $ref: "#/definitions/StringConfigItem"
      read_only:
        description: "'docker push' is prohibited by Harbor if you set it to true.\
          \   "
        $ref: "#/definitions/BoolConfigItem"
      self_registration:
        description: "Whether the Harbor instance supports self-registration.  If\
          \ it's set to false, admin need to add user to the instance."
        $ref: "#/definitions/BoolConfigItem"
      token_expiration:
        description: "The expiration time of the token for internal Registry, in minutes."
        $ref: "#/definitions/IntegerConfigItem"
      verify_remote_cert:
        description: "Whether or not the certificate will be verified when Harbor\
          \ tries to access a remote Harbor instance for replication."
        $ref: "#/definitions/BoolConfigItem"
      scan_all_policy:
        $ref: "#/definitions/Configurations_scan_all_policy"
    example:
      email_ssl:
        editable: true
        value: true
      ldap_timeout:
        editable: true
        value: 0
      ldap_filter:
        editable: true
        value: "value"
      auth_mode:
        editable: true
        value: "value"
      ldap_group_admin_dn:
        editable: true
        value: "value"
      ldap_group_base_dn:
        editable: true
        value: "value"
      email_port:
        editable: true
        value: 0
      email_insecure:
        editable: true
        value: true
      read_only:
        editable: true
        value: true
      ldap_group_attribute_name:
        editable: true
        value: "value"
      ldap_url:
        editable: true
        value: "value"
      token_expiration:
        editable: true
        value: 0
      ldap_scope: 6
      ldap_group_search_filter:
        editable: true
        value: "value"
      self_registration:
        editable: true
        value: true
      email_username:
        editable: true
        value: "value"
      ldap_base_dn:
        editable: true
        value: "value"
      ldap_group_search_scope:
        editable: true
        value: 0
      project_creation_restriction:
        editable: true
        value: "value"
      verify_remote_cert:
        editable: true
        value: true
      scan_all_policy:
        parameter:
          daily_time: 1
        type: "type"
      email_identity:
        editable: true
        value: "value"
      ldap_search_dn: "ldap_search_dn"
      ldap_uid:
        editable: true
        value: "value"
      email_from:
        editable: true
        value: "value"
      email_host:
        editable: true
        value: "value"
  RepositoryDescription:
    type: "object"
    properties:
      description:
        type: "string"
        description: "The description of the repository."
    example:
      description: "description"
  Label:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "The ID of label."
      name:
        type: "string"
        description: "The name of label."
      description:
        type: "string"
        description: "The description of label."
      color:
        type: "string"
        description: "The color of label."
      scope:
        type: "string"
        description: "The scope of label, g for global labels and p for project labels."
      project_id:
        type: "integer"
        description: "The project ID if the label is a project label."
      creation_time:
        type: "string"
        description: "The creation time of label."
      update_time:
        type: "string"
        description: "The update time of label."
      deleted:
        type: "boolean"
        description: "The label is deleted or not."
    example:
      creation_time: "creation_time"
      update_time: "update_time"
      deleted: true
      color: "color"
      project_id: 7
      scope: "scope"
      name: "name"
      description: "description"
      id: 2
  ProjectMemberEntity:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "the project member id"
      project_id:
        type: "integer"
        description: "the project id"
      entity_name:
        type: "string"
        description: "the name of the group member."
      role_name:
        type: "string"
        description: "the name of the role"
      role_id:
        type: "integer"
        description: "the role id"
      entity_id:
        type: "integer"
        description: "the id of entity, if the member is an user, it is user_id in\
          \ user table. if the member is an user group, it is the user group's ID\
          \ in user_group table."
      entity_type:
        type: "string"
        description: "the entity's type, u for user entity, g for group entity."
    example:
      role_name: "role_name"
      entity_type: "entity_type"
      project_id: 6
      entity_name: "entity_name"
      role_id: 1
      id: 0
      entity_id: 5
  ProjectMember:
    type: "object"
    properties:
      role_id:
        type: "integer"
        description: "The role id 1 for projectAdmin, 2 for developer, 3 for guest,\
          \ 4 for master"
      member_user:
        $ref: "#/definitions/UserEntity"
      member_group:
        $ref: "#/definitions/UserGroup"
    example:
      role_id: 0
      member_group:
        group_name: "group_name"
        ldap_group_dn: "ldap_group_dn"
        id: 1
        group_type: 5
      member_user:
        user_id: 6
        username: "username"
  RoleRequest:
    type: "object"
    properties:
      role_id:
        type: "integer"
        description: "The role id 1 for projectAdmin, 2 for developer, 3 for guest,\
          \ 4 for master"
    example:
      role_id: 0
  UserEntity:
    type: "object"
    properties:
      user_id:
        type: "integer"
        description: "The ID of the user."
      username:
        type: "string"
        description: "The name of the user."
    example:
      user_id: 6
      username: "username"
  UserGroup:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "The ID of the user group"
      group_name:
        type: "string"
        description: "The name of the user group"
      group_type:
        type: "integer"
        description: "The group type, 1 for LDAP group."
      ldap_group_dn:
        type: "string"
        description: "The DN of the LDAP group if group type is 1 (LDAP group)."
    example:
      group_name: "group_name"
      ldap_group_dn: "ldap_group_dn"
      id: 1
      group_type: 5
  Resource:
    type: "object"
    properties:
      replication_policies:
        type: "array"
        description: "The replication policy list."
        items:
          $ref: "#/definitions/ReplicationPolicy"
    example:
      replication_policies:
      - creation_time: "creation_time"
        description: "description"
        trigger:
          trigger_settings:
            cron: "cron"
          type: "type"
        filters:
        - type: "type"
          value: "value"
        - type: "type"
          value: "value"
        enabled: true
        update_time: "update_time"
        dest_registry:
          creation_time: "creation_time"
          update_time: "update_time"
          credential:
            access_key: "access_key"
            access_secret: "access_secret"
            type: "type"
          name: "name"
          insecure: true
          description: "description"
          id: 6
          type: "type"
          url: "url"
          status: "status"
        src_registry:
          creation_time: "creation_time"
          update_time: "update_time"
          credential:
            access_key: "access_key"
            access_secret: "access_secret"
            type: "type"
          name: "name"
          insecure: true
          description: "description"
          id: 6
          type: "type"
          url: "url"
          status: "status"
        deletion: true
        name: "name"
        dest_namespace: "dest_namespace"
        id: 0
        override: true
      - creation_time: "creation_time"
        description: "description"
        trigger:
          trigger_settings:
            cron: "cron"
          type: "type"
        filters:
        - type: "type"
          value: "value"
        - type: "type"
          value: "value"
        enabled: true
        update_time: "update_time"
        dest_registry:
          creation_time: "creation_time"
          update_time: "update_time"
          credential:
            access_key: "access_key"
            access_secret: "access_secret"
            type: "type"
          name: "name"
          insecure: true
          description: "description"
          id: 6
          type: "type"
          url: "url"
          status: "status"
        src_registry:
          creation_time: "creation_time"
          update_time: "update_time"
          credential:
            access_key: "access_key"
            access_secret: "access_secret"
            type: "type"
          name: "name"
          insecure: true
          description: "description"
          id: 6
          type: "type"
          url: "url"
          status: "status"
        deletion: true
        name: "name"
        dest_namespace: "dest_namespace"
        id: 0
        override: true
  StringConfigItem:
    type: "object"
    properties:
      value:
        type: "string"
        description: "The string value of current config item"
      editable:
        type: "boolean"
        description: "The configure item can be updated or not"
    example:
      editable: true
      value: "value"
  BoolConfigItem:
    type: "object"
    properties:
      value:
        type: "boolean"
        description: "The boolean value of current config item"
      editable:
        type: "boolean"
        description: "The configure item can be updated or not"
    example:
      editable: true
      value: true
  IntegerConfigItem:
    type: "object"
    properties:
      value:
        type: "integer"
        description: "The integer value of current config item"
      editable:
        type: "boolean"
        description: "The configure item can be updated or not"
    example:
      editable: true
      value: 0
  ChartAPIError:
    type: "object"
    required:
    - "error"
    properties:
      error:
        type: "string"
        description: "The error message returned by the chart API"
    description: "The error object returned by chart repository API"
  UnauthorizedChartAPIError:
    allOf:
    - $ref: "#/definitions/ChartAPIError"
    - {}
    description: "Unauthorized"
  ForbiddenChartAPIError:
    allOf:
    - $ref: "#/definitions/ChartAPIError"
    - {}
    description: "Operation is forbidden"
  InternalChartAPIError:
    allOf:
    - $ref: "#/definitions/ChartAPIError"
    - {}
    description: "Internal server error occurred"
  NotFoundChartAPIError:
    allOf:
    - $ref: "#/definitions/ChartAPIError"
    - {}
    description: "Not found"
  InsufficientStorageChartAPIError:
    allOf:
    - $ref: "#/definitions/ChartAPIError"
    - {}
    description: "Insufficient storage"
  BadRequestFormatedError:
    allOf:
    - $ref: "#/definitions/ChartAPIError"
    - {}
    description: "Bad request"
  ConflictFormatedError:
    allOf:
    - $ref: "#/definitions/ChartAPIError"
    - {}
    description: "Conflicts"
  ChartInfoEntry:
    type: "object"
    required:
    - "created"
    - "name"
    - "total_versions"
    properties:
      name:
        type: "string"
        description: "Name of chart"
      total_versions:
        type: "integer"
        description: "Total count of chart versions"
      latest_version:
        type: "string"
        description: "latest version of chart"
      created:
        type: "string"
        description: "The created time of chart"
      updated:
        type: "string"
        description: "The created time of chart"
      icon:
        type: "string"
        description: "The icon path of chart"
      home:
        type: "string"
        description: "The home website of chart"
      deprecated:
        type: "boolean"
        description: "Flag to indicate if the chart is deprecated"
    description: "The object contains basic chart information"
    example:
      total_versions: 0
      latest_version: "latest_version"
      created: "created"
      deprecated: true
      name: "name"
      icon: "icon"
      updated: "updated"
      home: "home"
  ChartInfoList:
    type: "array"
    description: "The chart list under the project"
    items:
      $ref: "#/definitions/ChartInfoEntry"
  ChartMetadata:
    type: "object"
    required:
    - "apiVersion"
    - "appVersion"
    - "engine"
    - "icon"
    - "name"
    - "version"
    properties:
      name:
        type: "string"
        description: "The name of the chart"
      home:
        type: "string"
        description: "The URL to the relevant project page"
      sources:
        type: "array"
        description: "The URL to the source code of chart"
        items:
          type: "string"
      version:
        type: "string"
        description: "A SemVer 2 version of chart"
      description:
        type: "string"
        description: "A one-sentence description of chart"
      keywords:
        type: "array"
        description: "A list of string keywords"
        items:
          type: "string"
      engine:
        type: "string"
        description: "The name of template engine"
      icon:
        type: "string"
        description: "The URL to an icon file"
      apiVersion:
        type: "string"
        description: "The API version of this chart"
      appVersion:
        type: "string"
        description: "The version of the application enclosed in the chart"
      deprecated:
        type: "boolean"
        description: "Whether or not this chart is deprecated"
    description: "The metadata of chart version"
  ChartVersion:
    allOf:
    - $ref: "#/definitions/ChartMetadata"
    - type: "object"
      properties:
        created:
          type: "string"
          description: "The created time of the chart entry"
        removed:
          type: "boolean"
          description: "A flag to indicate if the chart entry is removed"
        digest:
          type: "string"
          description: "The digest value of the chart entry"
        urls:
          type: "array"
          description: "The urls of the chart entry"
          items:
            type: "string"
    description: "A specified chart entry"
  ChartVersions:
    type: "array"
    description: "A list of chart entry"
    items:
      $ref: "#/definitions/ChartVersion"
  DigitalSignature:
    type: "object"
    properties:
      signed:
        type: "boolean"
        description: "A flag to indicate if the chart is signed"
      prov_file:
        type: "string"
        description: "The URL of the provance file"
    description: "The signature of the chart"
  SecurityReport:
    type: "object"
    properties:
      signature:
        $ref: "#/definitions/DigitalSignature"
    description: "The security information of the chart"
  Dependency:
    type: "object"
    required:
    - "name"
    - "version"
    properties:
      name:
        type: "string"
        description: "The name of the chart denpendency"
      version:
        type: "string"
        description: "The version of the chart dependency"
      repository:
        type: "string"
        description: "The URL to the repository"
    description: "Another chart the chart depends on"
  ChartVersionDetails:
    type: "object"
    properties:
      metadata:
        $ref: "#/definitions/ChartVersion"
      security:
        $ref: "#/definitions/SecurityReport"
      dependencies:
        type: "array"
        items:
          $ref: "#/definitions/Dependency"
      values:
        type: "object"
        additionalProperties:
          type: "object"
          properties: {}
      files:
        type: "object"
        additionalProperties:
          type: "string"
      labels:
        $ref: "#/definitions/Labels"
    description: "The detailed information of the chart entry"
  GCResult:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "the id of gc job."
      job_name:
        type: "string"
        description: "the job name of gc job."
      job_kind:
        type: "string"
        description: "the job kind of gc job."
      schedule:
        $ref: "#/definitions/AdminJobScheduleObj"
      job_status:
        type: "string"
        description: "the status of gc job."
      deleted:
        type: "boolean"
        description: "if gc job was deleted."
      creation_time:
        type: "string"
        description: "the creation time of gc job."
      update_time:
        type: "string"
        description: "the update time of gc job."
    example:
      creation_time: "creation_time"
      schedule:
        cron: "cron"
        type: "type"
      job_status: "job_status"
      update_time: "update_time"
      deleted: true
      job_name: "job_name"
      id: 0
      job_kind: "job_kind"
  AdminJobSchedule:
    type: "object"
    properties:
      schedule:
        $ref: "#/definitions/AdminJobScheduleObj"
    example:
      schedule:
        cron: "cron"
        type: "type"
  AdminJobScheduleObj:
    type: "object"
    properties:
      type:
        type: "string"
        description: "The schedule type. The valid values are hourly, daily， weekly,\
          \ custom and None. 'None' means to cancel the schedule."
      cron:
        type: "string"
        description: "A cron expression, a time-based job scheduler."
    example:
      cron: "cron"
      type: "type"
  SearchResult:
    type: "object"
    properties:
      name:
        type: "string"
        description: "The chart name with repo name"
      score:
        type: "integer"
        description: "The matched level"
      chart:
        $ref: "#/definitions/ChartVersion"
    description: "The chart search result item"
    example:
      score: 3
      name: "name"
      chart: ""
  Labels:
    type: "array"
    description: "A list of label"
    items:
      $ref: "#/definitions/Label"
  OverallHealthStatus:
    type: "object"
    properties:
      status:
        type: "string"
        description: "The overall health status. It is \"healthy\" only when all the\
          \ components' status are \"healthy\""
      components:
        type: "array"
        items:
          $ref: "#/definitions/ComponentHealthStatus"
    description: "The system health status"
    example:
      components:
      - name: "name"
        error: "error"
        status: "status"
      - name: "name"
        error: "error"
        status: "status"
      status: "status"
  ComponentHealthStatus:
    type: "object"
    properties:
      name:
        type: "string"
        description: "The component name"
      status:
        type: "string"
        description: "The health status of component"
      error:
        type: "string"
        description: "(optional) The error message when the status is \"unhealthy\""
    description: "The health status of component"
    example:
      name: "name"
      error: "error"
      status: "status"
  RobotAccount:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "The id of robot account"
      name:
        type: "string"
        description: "The name of robot account"
      description:
        type: "string"
        description: "The description of robot account"
      expires_at:
        type: "integer"
        description: "The expiration of robot account (in seconds)"
      project_id:
        type: "integer"
        description: "The project id of robot account"
      disabled:
        type: "boolean"
        description: "The robot account is disable or enable"
      creation_time:
        type: "string"
        description: "The creation time of the robot account"
      update_time:
        type: "string"
        description: "The update time of the robot account"
    description: "The object of robot account"
    example:
      creation_time: "creation_time"
      update_time: "update_time"
      expires_at: 6
      project_id: 1
      name: "name"
      description: "description"
      disabled: true
      id: 0
  RobotAccountCreate:
    type: "object"
    properties:
      name:
        type: "string"
        description: "The name of robot account"
      description:
        type: "string"
        description: "The description of robot account"
      access:
        type: "array"
        description: "The permission of robot account"
        items:
          $ref: "#/definitions/RobotAccountAccess"
    example:
      access:
      - resource: "resource"
        action: "action"
      - resource: "resource"
        action: "action"
      name: "name"
      description: "description"
  RobotAccountPostRep:
    type: "object"
    properties:
      name:
        type: "string"
        description: "the name of robot account"
      token:
        type: "string"
        description: "the token of robot account"
    example:
      name: "name"
      token: "token"
  RobotAccountAccess:
    type: "object"
    properties:
      resource:
        type: "string"
        description: "the resource of harbor"
      action:
        type: "string"
        description: "the action to resource that perdefined in harbor rbac"
    example:
      resource: "resource"
      action: "action"
  RobotAccountUpdate:
    type: "object"
    properties:
      disabled:
        type: "boolean"
        description: "The robot account is disable or enable"
    example:
      disabled: true
  Permission:
    type: "object"
    properties:
      resource:
        type: "string"
        description: "The permission resoruce"
      action:
        type: "string"
        description: "The permission action"
    description: "The permission"
    example:
      resource: "resource"
      action: "action"
  RegistryInfo:
    type: "object"
    properties:
      type:
        type: "string"
        description: "The registry type"
      description:
        type: "string"
        description: "The description"
      supported_resource_filters:
        type: "array"
        description: "The filters that the registry supports"
        items:
          $ref: "#/definitions/FilterStyle"
      supported_triggers:
        type: "array"
        description: "The triggers that the registry supports"
        items:
          type: "string"
    description: "The registry info contains the base info and capability declarations\
      \ of the registry"
    example:
      supported_triggers:
      - "supported_triggers"
      - "supported_triggers"
      description: "description"
      type: "type"
      supported_resource_filters:
      - values:
        - "values"
        - "values"
        style: "style"
        type: "type"
      - values:
        - "values"
        - "values"
        style: "style"
        type: "type"
  FilterStyle:
    type: "object"
    properties:
      type:
        type: "string"
        description: "The filter type"
      style:
        type: "string"
        description: "The filter style"
      values:
        type: "array"
        description: "The filter values"
        items:
          type: "string"
    description: "The style of the resource filter"
    example:
      values:
      - "values"
      - "values"
      style: "style"
      type: "type"
  ReplicationExecution:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "The ID"
      policy_id:
        type: "integer"
        description: "The policy ID"
      status:
        type: "string"
        description: "The status"
      status_text:
        type: "string"
        description: "The status text"
      trigger:
        type: "string"
        description: "The trigger mode"
      total:
        type: "integer"
        description: "The total count of all tasks"
      failed:
        type: "integer"
        description: "The count of failed tasks"
      succeed:
        type: "integer"
        description: "The count of succeed tasks"
      in_progress:
        type: "integer"
        description: "The count of in_progress tasks"
      stopped:
        type: "integer"
        description: "The count of stopped tasks"
      start_time:
        type: "string"
        description: "The start time"
      end_time:
        type: "string"
        description: "The end time"
    description: "The replication execution"
    example:
      start_time: "start_time"
      total: 1
      in_progress: 2
      stopped: 7
      policy_id: 6
      succeed: 5
      end_time: "end_time"
      id: 0
      status_text: "status_text"
      trigger: "trigger"
      failed: 5
      status: "status"
  ReplicationTask:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "The ID"
      execution_id:
        type: "integer"
        description: "The execution ID"
      resource_type:
        type: "string"
        description: "The resource type"
      src_resource:
        type: "string"
        description: "The source resource"
      dst_resource:
        type: "string"
        description: "The destination resource"
      job_id:
        type: "string"
        description: "The job ID"
      status:
        type: "string"
        description: "The status"
      start_time:
        type: "string"
        description: "The start time"
      end_time:
        type: "string"
        description: "The end time"
    description: "The replication task"
    example:
      execution_id: 6
      dst_resource: "dst_resource"
      start_time: "start_time"
      src_resource: "src_resource"
      job_id: "job_id"
      resource_type: "resource_type"
      end_time: "end_time"
      id: 0
      status: "status"
  Namespace:
    type: "object"
    properties:
      name:
        type: "string"
        description: "The name of namespace"
      metadata:
        type: "object"
        description: "The metadata of namespace"
        properties: {}
    description: "The namespace of registry"
    example:
      metadata: "{}"
      name: "name"
  inline_response_200:
    properties:
      secret:
        type: "string"
        description: "The new secret"
    example:
      secret: "secret"
  inline_response_200_1:
    properties:
      healthy:
        type: "boolean"
    example:
      healthy: true
  GeneralInfo_clair_vulnerability_status:
    properties:
      overall_last_update:
        type: "integer"
        description: "The UTC timestamp in milliseconds of last successful update\
          \ for Clair vulnerability data, when all the updaters are successfully executed."
      details:
        type: "array"
        description: "Detail timestamp of different namespace.  This is introduced\
          \ to handle the case when some updaters are executed successfully and some\
          \ not."
        items:
          $ref: "#/definitions/VulnNamespaceTimestamp"
    description: "The status of vulnerability data of Clair."
    example:
      overall_last_update: 6
      details:
      - last_update: 1
        namespace: "namespace"
      - last_update: 1
        namespace: "namespace"
  DetailedTag_scan_overview_components:
    properties:
      total:
        type: "integer"
        description: "Total number of the components in this image."
      summary:
        type: "array"
        description: "List of number of components of different severities."
        items:
          $ref: "#/definitions/ComponentOverviewEntry"
    description: "The components overview of the image."
    example:
      summary:
      - severity: 5
        count: 2
      - severity: 5
        count: 2
      total: 5
  DetailedTag_scan_overview:
    properties:
      digest:
        type: "string"
        description: "The digest of the image."
      scan_status:
        type: "string"
        description: "The status of the scan job, it can be \"pendnig\", \"running\"\
          , \"finished\", \"error\"."
      job_id:
        type: "integer"
        description: "The ID of the job on jobservice to scan the image."
      severity:
        type: "integer"
        description: "0-Not scanned, 1-Negligible, 2-Unknown, 3-Low, 4-Medium, 5-High"
      details_key:
        type: "string"
        description: "The top layer name of this image in Clair, this is for calling\
          \ Clair API to get the vulnerability list of this image."
      components:
        $ref: "#/definitions/DetailedTag_scan_overview_components"
    description: "The overview of the scan result.  This is an optional property."
    example:
      severity: 1
      components:
        summary:
        - severity: 5
          count: 2
        - severity: 5
          count: 2
        total: 5
      scan_status: "scan_status"
      job_id: 6
      digest: "digest"
      details_key: "details_key"
  Configurations_scan_all_policy_parameter:
    properties:
      daily_time:
        type: "integer"
        description: "The offest in seconds of UTC 0 o'clock, only valid when the\
          \ policy type is \"daily\""
    description: "The parameters of the policy, the values are dependant on the type\
      \ of the policy."
    example:
      daily_time: 1
  Configurations_scan_all_policy:
    properties:
      type:
        type: "string"
        description: "The type of scan all policy, currently the valid values are\
          \ \"none\" and \"daily\""
      parameter:
        $ref: "#/definitions/Configurations_scan_all_policy_parameter"
    example:
      parameter:
        daily_time: 1
      type: "type"
responses:
  OK:
    description: "Success"
  Created:
    description: "Created"
  BadRequest:
    description: "Bad Request"
  Unauthorized:
    description: "Unauthorized"
  Forbidden:
    description: "Forbidden"
  NotFound:
    description: "Not Found"
  Conflict:
    description: "Conflict"
  PreconditionFailed:
    description: "Precondition Failed"
  UnsupportedMediaType:
    description: "The Media Type of the request is not supported, it has to be \"\
      application/json\""
  InternalServerError:
    description: "Internal Server Error"
